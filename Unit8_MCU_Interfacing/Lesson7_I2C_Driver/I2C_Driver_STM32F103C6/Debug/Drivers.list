
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011d0  080011d0  000111d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f0  080011f0  000111f8  2**0
                  CONTENTS
  4 .ARM          00000000  080011f0  080011f0  000111f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f0  080011f8  000111f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  080011f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080011f8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d9a  00000000  00000000  00011221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001084  00000000  00000000  00017fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001356  00000000  00000000  0001903f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  0001a398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0001a688  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000136d  00000000  00000000  0001a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000363b  00000000  00000000  0001bc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000de0c  00000000  00000000  0001f298  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d0a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009c8  00000000  00000000  0002d120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011b8 	.word	0x080011b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011b8 	.word	0x080011b8

08000170 <EEPROM_Init>:

#include "I2C_Slave_EEPROM.h"


void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	//			PB7: I2C2_SDA

	I2C_Configuration_t I2C1_CFG;

	/*-------------------------------I2C controller act as a Master--------------------------*/
	I2C1_CFG.I2C_Mode = I2C_Mode_I2C;
 8000176:	2300      	movs	r3, #0
 8000178:	81bb      	strh	r3, [r7, #12]
	I2C1_CFG.I2C_General_Call_Control = I2C_General_Call_Control_Enable;
 800017a:	2340      	movs	r3, #64	; 0x40
 800017c:	827b      	strh	r3, [r7, #18]
	I2C1_CFG.I2C_ACK_Control = I2C_ACK_Control_Enable;
 800017e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000182:	823b      	strh	r3, [r7, #16]
	I2C1_CFG.I2C_Master_Mode_Selection = I2C_Master_Mode_Selection_SM;
 8000184:	2300      	movs	r3, #0
 8000186:	80bb      	strh	r3, [r7, #4]
	I2C1_CFG.I2C_ClockSpeed = I2C_ClockSpeed_SM_100KHz;
 8000188:	4b08      	ldr	r3, [pc, #32]	; (80001ac <EEPROM_Init+0x3c>)
 800018a:	60bb      	str	r3, [r7, #8]
	I2C1_CFG.I2C_Clock_Stretching = I2C_Clock_Stretching_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	81fb      	strh	r3, [r7, #14]
	I2C1_CFG.PF_Slave_Event_CallBack = NULL;
 8000190:	2300      	movs	r3, #0
 8000192:	61fb      	str	r3, [r7, #28]

	MCAL_GPIO_I2C_Set_Pins(I2C1);
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <EEPROM_Init+0x40>)
 8000196:	f000 fd0f 	bl	8000bb8 <MCAL_GPIO_I2C_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1_CFG);
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	4619      	mov	r1, r3
 800019e:	4804      	ldr	r0, [pc, #16]	; (80001b0 <EEPROM_Init+0x40>)
 80001a0:	f000 fc04 	bl	80009ac <MCAL_I2C_Init>
}
 80001a4:	bf00      	nop
 80001a6:	3720      	adds	r7, #32
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	000186a0 	.word	0x000186a0
 80001b0:	40005400 	.word	0x40005400

080001b4 <EEPROM_Write_Nbytes>:

uint8_t EEPROM_Write_Nbytes(uint32_t Memory_Address, uint8_t *Data, uint8_t Data_Length)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b0c8      	sub	sp, #288	; 0x120
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	f107 030c 	add.w	r3, r7, #12
 80001be:	6018      	str	r0, [r3, #0]
 80001c0:	f107 0308 	add.w	r3, r7, #8
 80001c4:	6019      	str	r1, [r3, #0]
 80001c6:	1dfb      	adds	r3, r7, #7
 80001c8:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//MISRA C++ 2008, 18-4-1 : Dynamic Memory Allocation shall not be used
	//Violate MISRA Rule
	//uint8_t *buffer = (unsigned char *)malloc(Data_Length+2);

	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_Address >> 8);	//upper byte of Memory address
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	0a1b      	lsrs	r3, r3, #8
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address);	//lower byte of Memory address
 80001e0:	f107 030c 	add.w	r3, r7, #12
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	705a      	strb	r2, [r3, #1]

	for(i = 2; i < (Data_Length+2); i++)
 80001ee:	2302      	movs	r3, #2
 80001f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f4:	e011      	b.n	800021a <EEPROM_Write_Nbytes+0x66>
	{
		buffer[i] = Data[i-2];
 80001f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001fa:	3b02      	subs	r3, #2
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	6812      	ldr	r2, [r2, #0]
 8000202:	441a      	add	r2, r3
 8000204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000208:	7811      	ldrb	r1, [r2, #0]
 800020a:	f107 0214 	add.w	r2, r7, #20
 800020e:	54d1      	strb	r1, [r2, r3]
	for(i = 2; i < (Data_Length+2); i++)
 8000210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000214:	3301      	adds	r3, #1
 8000216:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800021a:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021e:	1dfb      	adds	r3, r7, #7
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	3302      	adds	r3, #2
 8000224:	429a      	cmp	r2, r3
 8000226:	dbe6      	blt.n	80001f6 <EEPROM_Write_Nbytes+0x42>
	}

	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), With_Stop, Start);
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	b29b      	uxth	r3, r3
 800022e:	3302      	adds	r3, #2
 8000230:	b299      	uxth	r1, r3
 8000232:	f107 0214 	add.w	r2, r7, #20
 8000236:	2300      	movs	r3, #0
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	460b      	mov	r3, r1
 8000240:	212a      	movs	r1, #42	; 0x2a
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <EEPROM_Write_Nbytes+0xa0>)
 8000244:	f000 fd02 	bl	8000c4c <MCAL_I2C_Master_Tx>

	return 0;
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40005400 	.word	0x40005400

08000258 <EEPROM_Read_Nbytes>:

uint8_t EEPROM_Read_Nbytes(uint32_t Memory_Address, uint8_t *Data_Out, uint8_t Data_Length)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af02      	add	r7, sp, #8
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	4613      	mov	r3, r2
 8000264:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(Memory_Address >> 8);	//upper byte of Memory address
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	b2db      	uxtb	r3, r3
 800026c:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(Memory_Address);	//lower byte of Memory address
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, buffer, 2, Without_Stop, Start);	//Write Address
 8000274:	f107 0214 	add.w	r2, r7, #20
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2301      	movs	r3, #1
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2302      	movs	r3, #2
 8000282:	212a      	movs	r1, #42	; 0x2a
 8000284:	4809      	ldr	r0, [pc, #36]	; (80002ac <EEPROM_Read_Nbytes+0x54>)
 8000286:	f000 fce1 	bl	8000c4c <MCAL_I2C_Master_Tx>
	MCAL_I2C_Master_Rx(I2C1, EEPROM_Slave_Address, Data_Out, Data_Length, With_Stop, Repeated_Start);	//Read Data
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	b29a      	uxth	r2, r3
 800028e:	2301      	movs	r3, #1
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	2300      	movs	r3, #0
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	4613      	mov	r3, r2
 8000298:	68ba      	ldr	r2, [r7, #8]
 800029a:	212a      	movs	r1, #42	; 0x2a
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <EEPROM_Read_Nbytes+0x54>)
 800029e:	f000 fd2b 	bl	8000cf8 <MCAL_I2C_Master_Rx>

	return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40005400 	.word	0x40005400

080002b0 <EXTI0_IRQHandler>:
//ISR Functions:
//-*-*-*-*-*-*-*-*-*-*-*

/* EXTI0 */
void EXTI0_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI0);
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI0_IRQHandler+0x1c>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI0_IRQHandler+0x1c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI0]();
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <EXTI0_IRQHandler+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4798      	blx	r3

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400
 80002d0:	20000030 	.word	0x20000030

080002d4 <EXTI1_IRQHandler>:

/* EXTI1 */
void EXTI1_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI1);
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI1_IRQHandler+0x1c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI1_IRQHandler+0x1c>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI1]();
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <EXTI1_IRQHandler+0x20>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	4798      	blx	r3
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400
 80002f4:	20000030 	.word	0x20000030

080002f8 <EXTI2_IRQHandler>:

/* EXTI2 */
void EXTI2_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI2);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI2_IRQHandler+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI2_IRQHandler+0x1c>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI2]();
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI2_IRQHandler+0x20>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4798      	blx	r3
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	20000030 	.word	0x20000030

0800031c <EXTI3_IRQHandler>:

/* EXTI3 */
void EXTI3_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI3);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI3_IRQHandler+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <EXTI3_IRQHandler+0x1c>)
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI3]();
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI3_IRQHandler+0x20>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	20000030 	.word	0x20000030

08000340 <EXTI4_IRQHandler>:

/* EXTI4 */
void EXTI4_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI4);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI4_IRQHandler+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI4_IRQHandler+0x1c>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI4]();
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI4_IRQHandler+0x20>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010400 	.word	0x40010400
 8000360:	20000030 	.word	0x20000030

08000364 <EXTI9_5_IRQHandler>:

/* EXTI9_5 */
void EXTI9_5_IRQHandler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_5)
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f003 0320 	and.w	r3, r3, #32
 8000370:	2b00      	cmp	r3, #0
 8000372:	d008      	beq.n	8000386 <EXTI9_5_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI5);
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a22      	ldr	r2, [pc, #136]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI5]();
 8000380:	4b21      	ldr	r3, [pc, #132]	; (8000408 <EXTI9_5_IRQHandler+0xa4>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_6)
 8000386:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038e:	2b00      	cmp	r3, #0
 8000390:	d008      	beq.n	80003a4 <EXTI9_5_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI6);
 8000392:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 8000398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039c:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI6]();
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <EXTI9_5_IRQHandler+0xa4>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_7)
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <EXTI9_5_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI7);
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ba:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI7]();
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <EXTI9_5_IRQHandler+0xa4>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_8)
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d008      	beq.n	80003e0 <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI8);
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d8:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI8]();
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <EXTI9_5_IRQHandler+0xa4>)
 80003dc:	6a1b      	ldr	r3, [r3, #32]
 80003de:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_9)
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d008      	beq.n	80003fe <EXTI9_5_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI9);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <EXTI9_5_IRQHandler+0xa0>)
 80003f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f6:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI9]();
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <EXTI9_5_IRQHandler+0xa4>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4798      	blx	r3
	}
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010400 	.word	0x40010400
 8000408:	20000030 	.word	0x20000030

0800040c <EXTI15_10_IRQHandler>:

/* EXTI15_10 */
void EXTI15_10_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_10)
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000418:	2b00      	cmp	r3, #0
 800041a:	d008      	beq.n	800042e <EXTI15_10_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI10);
 800041c:	4b2a      	ldr	r3, [pc, #168]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 8000422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000426:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI10]();
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <EXTI15_10_IRQHandler+0xc0>)
 800042a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042c:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_11)
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000436:	2b00      	cmp	r3, #0
 8000438:	d008      	beq.n	800044c <EXTI15_10_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI11);
 800043a:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 8000440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000444:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI11]();
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <EXTI15_10_IRQHandler+0xc0>)
 8000448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044a:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_12)
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <EXTI15_10_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI12);
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800045e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000462:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI12]();
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <EXTI15_10_IRQHandler+0xc0>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_13)
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d008      	beq.n	8000488 <EXTI15_10_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI13);
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800047c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000480:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI13]();
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <EXTI15_10_IRQHandler+0xc0>)
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_14)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <EXTI15_10_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI14);
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 800049a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI14]();
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <EXTI15_10_IRQHandler+0xc0>)
 80004a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a4:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_15)
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d008      	beq.n	80004c4 <EXTI15_10_IRQHandler+0xb8>
	{
		SET_BIT(EXTI->PR,EXTI15);
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <EXTI15_10_IRQHandler+0xbc>)
 80004b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004bc:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI15]();
 80004be:	4b03      	ldr	r3, [pc, #12]	; (80004cc <EXTI15_10_IRQHandler+0xc0>)
 80004c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004c2:	4798      	blx	r3
	}
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010400 	.word	0x40010400
 80004cc:	20000030 	.word	0x20000030

080004d0 <Get_PIN_Position>:
 * @param [in] 	-PinNumber: Set PIN number according to @ref GPIO_PINs_define.
 * @retval 		-it return the position of the PIN
 * Note			-none
================================================================**/
uint8_t Get_PIN_Position(uint16_t PIN_Number)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
	switch(PIN_Number)
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	2b80      	cmp	r3, #128	; 0x80
 80004de:	d042      	beq.n	8000566 <Get_PIN_Position+0x96>
 80004e0:	2b80      	cmp	r3, #128	; 0x80
 80004e2:	dc11      	bgt.n	8000508 <Get_PIN_Position+0x38>
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d036      	beq.n	8000556 <Get_PIN_Position+0x86>
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	dc06      	bgt.n	80004fa <Get_PIN_Position+0x2a>
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d02e      	beq.n	800054e <Get_PIN_Position+0x7e>
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d02e      	beq.n	8000552 <Get_PIN_Position+0x82>
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d028      	beq.n	800054a <Get_PIN_Position+0x7a>
 80004f8:	e037      	b.n	800056a <Get_PIN_Position+0x9a>
 80004fa:	2b20      	cmp	r3, #32
 80004fc:	d02f      	beq.n	800055e <Get_PIN_Position+0x8e>
 80004fe:	2b40      	cmp	r3, #64	; 0x40
 8000500:	d02f      	beq.n	8000562 <Get_PIN_Position+0x92>
 8000502:	2b10      	cmp	r3, #16
 8000504:	d029      	beq.n	800055a <Get_PIN_Position+0x8a>
 8000506:	e030      	b.n	800056a <Get_PIN_Position+0x9a>
 8000508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050c:	d023      	beq.n	8000556 <Get_PIN_Position+0x86>
 800050e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000512:	dc09      	bgt.n	8000528 <Get_PIN_Position+0x58>
 8000514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000518:	d019      	beq.n	800054e <Get_PIN_Position+0x7e>
 800051a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051e:	d018      	beq.n	8000552 <Get_PIN_Position+0x82>
 8000520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000524:	d011      	beq.n	800054a <Get_PIN_Position+0x7a>
 8000526:	e020      	b.n	800056a <Get_PIN_Position+0x9a>
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052c:	d017      	beq.n	800055e <Get_PIN_Position+0x8e>
 800052e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000532:	dc03      	bgt.n	800053c <Get_PIN_Position+0x6c>
 8000534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000538:	d00f      	beq.n	800055a <Get_PIN_Position+0x8a>
 800053a:	e016      	b.n	800056a <Get_PIN_Position+0x9a>
 800053c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000540:	d00f      	beq.n	8000562 <Get_PIN_Position+0x92>
 8000542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000546:	d00e      	beq.n	8000566 <Get_PIN_Position+0x96>
 8000548:	e00f      	b.n	800056a <Get_PIN_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800054a:	2300      	movs	r3, #0
 800054c:	e00e      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800054e:	2304      	movs	r3, #4
 8000550:	e00c      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000552:	2308      	movs	r3, #8
 8000554:	e00a      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000556:	230c      	movs	r3, #12
 8000558:	e008      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800055a:	2310      	movs	r3, #16
 800055c:	e006      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800055e:	2314      	movs	r3, #20
 8000560:	e004      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000562:	2318      	movs	r3, #24
 8000564:	e002      	b.n	800056c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000566:	231c      	movs	r3, #28
 8000568:	e000      	b.n	800056c <Get_PIN_Position+0x9c>
		break;
	}

	return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 Package has only GPIO A,B Part of C,D exported as external PINs from the MCU
================================================================**/
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PIN_Configuration_t *PIN_Config)
{
 8000576:	b590      	push	{r4, r7, lr}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *Configuration_Register = NULL;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
	volatile uint8_t pin_configuration;

	//check if Configuration_Register is CRL or CRH
	Configuration_Register = (PIN_Config->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2bff      	cmp	r3, #255	; 0xff
 800058a:	d801      	bhi.n	8000590 <MCAL_GPIO_Init+0x1a>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	e001      	b.n	8000594 <MCAL_GPIO_Init+0x1e>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3304      	adds	r3, #4
 8000594:	60fb      	str	r3, [r7, #12]

	//Reset CNF0[1:0] MODE0[1:0]
	(*Configuration_Register) &= ~(0xf << Get_PIN_Position(PIN_Config->GPIO_PinNumber));
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff98 	bl	80004d0 <Get_PIN_Position>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	230f      	movs	r3, #15
 80005a6:	4093      	lsls	r3, r2
 80005a8:	43da      	mvns	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	401a      	ands	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	601a      	str	r2, [r3, #0]
	 * ------------------
	 * |  3	| 2 | 1	| 0	|
	 * ------------------
	 */
	//check if PIN is O/P or I/P
	if((PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_PP) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_OD) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_AF_PP) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_AF_OD))
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d00b      	beq.n	80005d4 <MCAL_GPIO_Init+0x5e>
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d007      	beq.n	80005d4 <MCAL_GPIO_Init+0x5e>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d003      	beq.n	80005d4 <MCAL_GPIO_Init+0x5e>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	d10f      	bne.n	80005f4 <MCAL_GPIO_Init+0x7e>
		 * 00: General purpose output push-pull		--> GPIO_MODE_OUTPUT_PP		>>	0x00000004u
		 * 01: General purpose output Open-drain	--> GPIO_MODE_OUTPUT_OD		>>	0x00000005u
		 * 10: Alternate function output Push-pull	--> GPIO_MODE_OUTPUT_AF_PP	>>	0x00000006u
		 * 11: Alternate function output Open-drain	--> GPIO_MODE_OUTPUT_AF_OD	>>	0x00000007u
		 */
		pin_configuration = ((((PIN_Config->GPIO_PinMODE - 4) << 2) | (PIN_Config->GPIO_PinSPEED)) & 0x0f);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	3b04      	subs	r3, #4
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	72fb      	strb	r3, [r7, #11]
 80005f2:	e033      	b.n	800065c <MCAL_GPIO_Init+0xe6>
		 * 11: Input with PU or PD	--> GPIO_MODE_INPUT_PU
		 * 		PU: ODR --> 1
		 * 		PD: ODR --> 0
		 */
		//check if PIN is Analog or floating input
		if((PIN_Config->GPIO_PinMODE == GPIO_MODE_ANALOG) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_FLO))
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <MCAL_GPIO_Init+0x8e>
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d108      	bne.n	8000616 <MCAL_GPIO_Init+0xa0>
		{
			pin_configuration = ((((PIN_Config->GPIO_PinMODE) << 2) | (0x0)) & 0x0f);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 030f 	and.w	r3, r3, #15
 8000610:	b2db      	uxtb	r3, r3
 8000612:	72fb      	strb	r3, [r7, #11]
 8000614:	e022      	b.n	800065c <MCAL_GPIO_Init+0xe6>
		}
		else if((PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_AF)) //Alternative I/P
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	2b08      	cmp	r3, #8
 800061c:	d102      	bne.n	8000624 <MCAL_GPIO_Init+0xae>
		{
			pin_configuration = ((((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0f);
 800061e:	2304      	movs	r3, #4
 8000620:	72fb      	strb	r3, [r7, #11]
 8000622:	e01b      	b.n	800065c <MCAL_GPIO_Init+0xe6>
		}
		else //input PU or PD
		{
			pin_configuration = ((((PIN_Config->GPIO_PinMODE) << 2) | (0x0)) & 0x0f);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 030f 	and.w	r3, r3, #15
 8000630:	b2db      	uxtb	r3, r3
 8000632:	72fb      	strb	r3, [r7, #11]
			/*
			 * Table 20. Port bit configuration table
			 * input PU >> PxODR register = 1
			 * input PD >> PxODR register = 0
			 */
			if(PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_PU) //I/P pull up
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d107      	bne.n	800064c <MCAL_GPIO_Init+0xd6>
			{
				GPIOx->ODR |= ((uint32_t)(PIN_Config->GPIO_PinNumber));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	8812      	ldrh	r2, [r2, #0]
 8000644:	431a      	orrs	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	e007      	b.n	800065c <MCAL_GPIO_Init+0xe6>
			}
			else //I/P pull down
			{
				GPIOx->ODR &= ~((uint32_t)(PIN_Config->GPIO_PinNumber));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	43db      	mvns	r3, r3
 8000656:	401a      	ands	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//Put the values of CNF & MODE in CRL or CRH
	(*Configuration_Register) |= (pin_configuration << Get_PIN_Position(PIN_Config->GPIO_PinNumber));
 800065c:	7afb      	ldrb	r3, [r7, #11]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	461c      	mov	r4, r3
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff32 	bl	80004d0 <Get_PIN_Position>
 800066c:	4603      	mov	r3, r0
 800066e:	fa04 f203 	lsl.w	r2, r4, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	431a      	orrs	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	601a      	str	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}

08000684 <I2C_Generate_Start_Condition>:
 * @param [in] 	-start: it is determine that we send start or repeated start
 * @retval 		-none
 * Note			-none
================================================================**/
void I2C_Generate_Start_Condition(I2C_TypeDef *I2Cx, Functional_State state, Start_State start)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
 8000690:	4613      	mov	r3, r2
 8000692:	70bb      	strb	r3, [r7, #2]
	//check if we use start or repeated start because if we use normal start we should check that if the bus is bus
	//but when we use repeated start we don't check because the bus is busy because we use it.
	if(start != Repeated_Start)
 8000694:	78bb      	ldrb	r3, [r7, #2]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d007      	beq.n	80006aa <I2C_Generate_Start_Condition+0x26>
	{
		//check if the bus is busy or not (Bus is idle)
		while(I2C_Get_Flag_Status(I2Cx, I2C_FlAG_BUS_BUSY));
 800069a:	bf00      	nop
 800069c:	2100      	movs	r1, #0
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f81a 	bl	80006d8 <I2C_Get_Flag_Status>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1f8      	bne.n	800069c <I2C_Generate_Start_Condition+0x18>
	//0: No Start generation
	//1: Repeated start generation
	//In Slave mode:
	//0: No Start generation
	//1: Start generation when the bus is free
	if(state == Fun_enable)
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d106      	bne.n	80006be <I2C_Generate_Start_Condition+0x3a>
	{
		/* Generate the start condition */
		I2Cx->CR1 |= I2C_CR1_START;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
	else if(state == Fun_disable)
	{
		/* Don't Generate the start condition */
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 80006bc:	e008      	b.n	80006d0 <I2C_Generate_Start_Condition+0x4c>
	else if(state == Fun_disable)
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d105      	bne.n	80006d0 <I2C_Generate_Start_Condition+0x4c>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <I2C_Get_Flag_Status>:
 * @param [in] 	-flag: it is the flag that we need to check its status
 * @retval 		-we return the status of the flag --> set or reset
 * Note			-none
================================================================**/
Flag_Status I2C_Get_Flag_Status(I2C_TypeDef *I2Cx, Status flag)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummy_Read = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
	uint32_t flag1 = 0, flag2 = 0, Last_Event = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
	Flag_Status flag_state = reset;
 80006f2:	2300      	movs	r3, #0
 80006f4:	77fb      	strb	r3, [r7, #31]

	switch(flag)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d806      	bhi.n	800070a <I2C_Get_Flag_Status+0x32>
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d249      	bcs.n	8000794 <I2C_Get_Flag_Status+0xbc>
 8000700:	2b01      	cmp	r3, #1
 8000702:	d014      	beq.n	800072e <I2C_Get_Flag_Status+0x56>
 8000704:	2b01      	cmp	r3, #1
 8000706:	d81e      	bhi.n	8000746 <I2C_Get_Flag_Status+0x6e>
 8000708:	e005      	b.n	8000716 <I2C_Get_Flag_Status+0x3e>
 800070a:	2b05      	cmp	r3, #5
 800070c:	d04e      	beq.n	80007ac <I2C_Get_Flag_Status+0xd4>
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <I2C_Get_Flag_Status+0xf8>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d024      	beq.n	800075e <I2C_Get_Flag_Status+0x86>
 8000714:	e056      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
	//– Set by hardware on detection of SDA or SCL low
	//– cleared by hardware on detection of a Stop condition.
	//It indicates a communication in progress on the bus. This information is still updated when
	//the interface is disabled (PE=0).
	case I2C_FlAG_BUS_BUSY:
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <I2C_Get_Flag_Status+0x50>
			flag_state = set;
 8000722:	2301      	movs	r3, #1
 8000724:	77fb      	strb	r3, [r7, #31]
		else
			flag_state = reset;
		break;
 8000726:	e04d      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
			flag_state = reset;
 8000728:	2300      	movs	r3, #0
 800072a:	77fb      	strb	r3, [r7, #31]
		break;
 800072c:	e04a      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
		//1: Start condition generated.
		//– Set when a Start condition generated.
		//– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//hardware when PE=0
	case EV5:
		if((I2Cx->SR1) & (I2C_SR1_SB))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <I2C_Get_Flag_Status+0x68>
			flag_state = set;
 800073a:	2301      	movs	r3, #1
 800073c:	77fb      	strb	r3, [r7, #31]
		else
			flag_state = reset;
		break;
 800073e:	e041      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
			flag_state = reset;
 8000740:	2300      	movs	r3, #0
 8000742:	77fb      	strb	r3, [r7, #31]
		break;
 8000744:	e03e      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
		//1: End of address transmission
		//– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		//– For 7-bit addressing, the bit is set after the ACK of the byte.
		//Note: ADDR is not set after a NACK reception
	case EV6:
		if((I2Cx->SR1) & (I2C_SR1_ADDR))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <I2C_Get_Flag_Status+0x80>
			flag_state = set;
 8000752:	2301      	movs	r3, #1
 8000754:	77fb      	strb	r3, [r7, #31]
		else
			flag_state = reset;
		break;
 8000756:	e035      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
			flag_state = reset;
 8000758:	2300      	movs	r3, #0
 800075a:	77fb      	strb	r3, [r7, #31]
		break;
 800075c:	e032      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
	//*******************************************************************************

	//*******************************************************************************
	case MASTER_BYTE_TRANSMITTING:
		/* Read I2Cx status registers */
		flag1 = I2Cx->SR1;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	617b      	str	r3, [r7, #20]

		/* Merge flag1 & flag2 in the same variable to get the last event */
		Last_Event = ((flag1 | flag2) & ((uint32_t)0x00FFFFFF));
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4313      	orrs	r3, r2
 8000776:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800077a:	613b      	str	r3, [r7, #16]

		if((Last_Event & flag) == flag)
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4013      	ands	r3, r2
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d102      	bne.n	800078e <I2C_Get_Flag_Status+0xb6>
		{
			// last event is equal to I2C Event
			flag_state = set;
 8000788:	2301      	movs	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
		else
		{
			// last event is different from I2C Event
			flag_state = reset;
		}
		break;
 800078c:	e01a      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
			flag_state = reset;
 800078e:	2300      	movs	r3, #0
 8000790:	77fb      	strb	r3, [r7, #31]
		break;
 8000792:	e017      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
		//TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//BTF is set, as in both cases the data register is still empty.
	case EV8:
	case EV8_1:
		if((I2Cx->SR1) & (I2C_SR1_TXE))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <I2C_Get_Flag_Status+0xce>
			flag_state = set;
 80007a0:	2301      	movs	r3, #1
 80007a2:	77fb      	strb	r3, [r7, #31]
		else
			flag_state = reset;
		break;
 80007a4:	e00e      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
			flag_state = reset;
 80007a6:	2300      	movs	r3, #0
 80007a8:	77fb      	strb	r3, [r7, #31]
		break;
 80007aa:	e00b      	b.n	80007c4 <I2C_Get_Flag_Status+0xec>
		//– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//RxNE is not set in case of ARLO event.
		//Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full
	case EV7:
		if((I2Cx->SR1) & I2C_SR1_RXNE)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <I2C_Get_Flag_Status+0xe6>
			flag_state = set;
 80007b8:	2301      	movs	r3, #1
 80007ba:	77fb      	strb	r3, [r7, #31]
		else
			flag_state = reset;
		break;
 80007bc:	e001      	b.n	80007c2 <I2C_Get_Flag_Status+0xea>
			flag_state = reset;
 80007be:	2300      	movs	r3, #0
 80007c0:	77fb      	strb	r3, [r7, #31]
		break;
 80007c2:	bf00      	nop
	//*******************************************************************************
	}


	return flag_state;
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	00070080 	.word	0x00070080

080007d4 <I2C_Send_Address>:
 * @param [in] 	-RW: it is determine that we need to write or read
 * @retval 		-none
 * Note			-none
================================================================**/
void I2C_Send_Address(I2C_TypeDef *I2Cx, uint16_t Address, I2C_Direction RW)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
 80007e0:	4613      	mov	r3, r2
 80007e2:	707b      	strb	r3, [r7, #1]
	uint8_t Index = (I2Cx == I2C1)? I2C1_INDEX : I2C2_INDEX;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a19      	ldr	r2, [pc, #100]	; (800084c <I2C_Send_Address+0x78>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	73fb      	strb	r3, [r7, #15]

	/* check if we are in 7-bit or 10-bit address mode */
	if(Gl_AI2C_CFG[Index].I2C_Slave_Device_Address.I2C_Slave_Address_Length == I2C_Slave_Address_Length_7Bit)
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	4916      	ldr	r1, [pc, #88]	; (8000850 <I2C_Send_Address+0x7c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3310      	adds	r3, #16
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d115      	bne.n	8000836 <I2C_Send_Address+0x62>
	{
		/* Send the Address */
		Address = (Address << 1);
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	807b      	strh	r3, [r7, #2]

		if(RW == I2C_Direction_Transimitter)
 8000810:	787b      	ldrb	r3, [r7, #1]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d104      	bne.n	8000820 <I2C_Send_Address+0x4c>
		{
			/* Clear RW bit when we write */
			Address &= ~(1 << 0);
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	f023 0301 	bic.w	r3, r3, #1
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	e006      	b.n	800082e <I2C_Send_Address+0x5a>
		}
		else if(RW == I2C_Direction_Receiver)
 8000820:	787b      	ldrb	r3, [r7, #1]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d103      	bne.n	800082e <I2C_Send_Address+0x5a>
		{
			/* Set RW bit when we read */
			Address |= (1 << 0);
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	807b      	strh	r3, [r7, #2]
		}

		I2Cx->DR = Address;
 800082e:	887a      	ldrh	r2, [r7, #2]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	611a      	str	r2, [r3, #16]
	}
	else if(Gl_AI2C_CFG[Index].I2C_Slave_Device_Address.I2C_Slave_Address_Length == I2C_Slave_Address_Length_10Bit)
	{
		//10-Bit slave address is not supported
	}
}
 8000834:	e004      	b.n	8000840 <I2C_Send_Address+0x6c>
	else if(Gl_AI2C_CFG[Index].I2C_Slave_Device_Address.I2C_Slave_Address_Length == I2C_Slave_Address_Length_10Bit)
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	009b      	lsls	r3, r3, #2
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40005400 	.word	0x40005400
 8000850:	2000006c 	.word	0x2000006c

08000854 <I2C_Generate_Stop_Condition>:
 * @param [in] 	-Functional_State: it is used to determine if we need to enable or disable this function
 * @retval 		-none
 * Note			-none
================================================================**/
void I2C_Generate_Stop_Condition(I2C_TypeDef *I2Cx, Functional_State state)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	//0: No Stop generation.
	//1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//In Slave mode:
	//0: No Stop generation.
	//1: Release the SCL and SDA lines after the current byte transfer
	if(state == Fun_enable)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d106      	bne.n	8000874 <I2C_Generate_Stop_Condition+0x20>
	{
		I2Cx->CR1 |= (I2C_CR1_STOP);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
	}
	else if(state == Fun_disable)
	{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000872:	e008      	b.n	8000886 <I2C_Generate_Stop_Condition+0x32>
	else if(state == Fun_disable)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <I2C_Generate_Stop_Condition+0x32>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <I2C_Acknowledge_Config>:
 * @param [in] 	-Functional_State: it is used to determine if we need to enable or disable this function
 * @retval 		-none
 * Note			-none
================================================================**/
void I2C_Acknowledge_Config(I2C_TypeDef *I2Cx, Functional_State state)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	//Bit 10 ACK: Acknowledge enable
	//This bit is set and cleared by software and cleared by hardware when PE=0.
	//0: No acknowledge returned
	//1: Acknowledge returned after a byte is received (matched address or data)
	if(state == Fun_enable)
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d106      	bne.n	80008b0 <I2C_Acknowledge_Config+0x20>
	{
		I2Cx->CR1 |= (I2C_CR1_ACK);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
	}
	else if(state == Fun_disable)
	{
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80008ae:	e008      	b.n	80008c2 <I2C_Acknowledge_Config+0x32>
	else if(state == Fun_disable)
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d105      	bne.n	80008c2 <I2C_Acknowledge_Config+0x32>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <Slave_States>:
 * @param [in] 	-State: it is the a flag that determine which ISR should we call it
 * @retval 		-none
 * Note			-none
================================================================**/
void Slave_States(I2C_TypeDef *I2Cx,Slave_State_t State)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <Slave_States+0xd8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	73fb      	strb	r3, [r7, #15]

	switch(State)
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d856      	bhi.n	800099c <Slave_States+0xd0>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <Slave_States+0x28>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	0800090f 	.word	0x0800090f
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000933 	.word	0x08000933
 8000900:	0800094b 	.word	0x0800094b
 8000904:	0800096f 	.word	0x0800096f
	{
	//*******************************************************************************
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 800090c:	e046      	b.n	800099c <Slave_States+0xd0>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	2b00      	cmp	r3, #0
 8000918:	d03b      	beq.n	8000992 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_STOP);
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <Slave_States+0xdc>)
 800091e:	4613      	mov	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	440b      	add	r3, r1
 8000928:	3318      	adds	r3, #24
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2000      	movs	r0, #0
 800092e:	4798      	blx	r3
		}
		break;
 8000930:	e02f      	b.n	8000992 <Slave_States+0xc6>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	491c      	ldr	r1, [pc, #112]	; (80009a8 <Slave_States+0xdc>)
 8000936:	4613      	mov	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	3318      	adds	r3, #24
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2002      	movs	r0, #2
 8000946:	4798      	blx	r3
		break;
 8000948:	e028      	b.n	800099c <Slave_States+0xd0>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	2b00      	cmp	r3, #0
 8000954:	d01f      	beq.n	8000996 <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_Slave_Tx)in this state
			Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	4913      	ldr	r1, [pc, #76]	; (80009a8 <Slave_States+0xdc>)
 800095a:	4613      	mov	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	440b      	add	r3, r1
 8000964:	3318      	adds	r3, #24
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2003      	movs	r0, #3
 800096a:	4798      	blx	r3
		}
		break;
 800096c:	e013      	b.n	8000996 <Slave_States+0xca>
	//*******************************************************************************

	//*******************************************************************************
	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_Slave_Rx)in this state
			Gl_AI2C_CFG[index].PF_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	490a      	ldr	r1, [pc, #40]	; (80009a8 <Slave_States+0xdc>)
 800097e:	4613      	mov	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	440b      	add	r3, r1
 8000988:	3318      	adds	r3, #24
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2004      	movs	r0, #4
 800098e:	4798      	blx	r3
		}
		break;
 8000990:	e003      	b.n	800099a <Slave_States+0xce>
		break;
 8000992:	bf00      	nop
 8000994:	e002      	b.n	800099c <Slave_States+0xd0>
		break;
 8000996:	bf00      	nop
 8000998:	e000      	b.n	800099c <Slave_States+0xd0>
		break;
 800099a:	bf00      	nop
	//*******************************************************************************
	}
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	2000006c 	.word	0x2000006c

080009ac <MCAL_I2C_Init>:
 * @param [in] 	-I2C_Config: it is a structure containing configuration of I2C.
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_I2C_Init(I2C_TypeDef *I2Cx, I2C_Configuration_t *I2C_Config)
{
 80009ac:	b5b0      	push	{r4, r5, r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
	uint16_t TempReg = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	82fb      	strh	r3, [r7, #22]
	uint32_t PClk1 = 8000000;
 80009ba:	4b77      	ldr	r3, [pc, #476]	; (8000b98 <MCAL_I2C_Init+0x1ec>)
 80009bc:	613b      	str	r3, [r7, #16]
	uint16_t FreqRange = 0, CCR_Val = 0, RiseTime = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	2300      	movs	r3, #0
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	2300      	movs	r3, #0
 80009c8:	817b      	strh	r3, [r7, #10]

	/*-------------------------------enable clock for peripheral--------------------------*/
	if(I2Cx == I2C1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a73      	ldr	r2, [pc, #460]	; (8000b9c <MCAL_I2C_Init+0x1f0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d110      	bne.n	80009f4 <MCAL_I2C_Init+0x48>
	{
		RCC_I2C1_CLK_EN();
 80009d2:	4b73      	ldr	r3, [pc, #460]	; (8000ba0 <MCAL_I2C_Init+0x1f4>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a72      	ldr	r2, [pc, #456]	; (8000ba0 <MCAL_I2C_Init+0x1f4>)
 80009d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009dc:	61d3      	str	r3, [r2, #28]
		Gl_AI2C_CFG[I2C1_INDEX] = *I2C_Config;
 80009de:	4a71      	ldr	r2, [pc, #452]	; (8000ba4 <MCAL_I2C_Init+0x1f8>)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	4614      	mov	r4, r2
 80009e4:	461d      	mov	r5, r3
 80009e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009f2:	e014      	b.n	8000a1e <MCAL_I2C_Init+0x72>
	}
	else if(I2Cx == I2C2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a6c      	ldr	r2, [pc, #432]	; (8000ba8 <MCAL_I2C_Init+0x1fc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d110      	bne.n	8000a1e <MCAL_I2C_Init+0x72>
	{
		RCC_I2C2_CLK_EN();
 80009fc:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <MCAL_I2C_Init+0x1f4>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	4a67      	ldr	r2, [pc, #412]	; (8000ba0 <MCAL_I2C_Init+0x1f4>)
 8000a02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a06:	61d3      	str	r3, [r2, #28]
		Gl_AI2C_CFG[I2C2_INDEX] = *I2C_Config;
 8000a08:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <MCAL_I2C_Init+0x1f8>)
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	f103 041c 	add.w	r4, r3, #28
 8000a10:	4615      	mov	r5, r2
 8000a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	/*-------------------------------see if we are in I2C Mode or SMBus Mode--------------------------*/
	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	891b      	ldrh	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f040 80b4 	bne.w	8000b90 <MCAL_I2C_Init+0x1e4>
	{
		/* Disable the peripheral till we initialize the clock and the timing of the peripheral */
		I2Cx->CR1 &= ~(I2C_CR1_PE_Msk);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f023 0201 	bic.w	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
		//*******************************************************************************
		//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
		//		--> Bits 5:0 FREQ[5:0]: Peripheral clock frequency in I2C_CR2

		/* Get PClk1 by using RCC Driver */
		PClk1 = MCAL_RCC_GetPCLK1Freq();
 8000a34:	f000 fa8c 	bl	8000f50 <MCAL_RCC_GetPCLK1Freq>
 8000a38:	6138      	str	r0, [r7, #16]

		/* Frequency Range --> FREQ = PClk1 / 1000000(M) */
		FreqRange = (uint16_t)(PClk1 / 1000000);
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4a5b      	ldr	r2, [pc, #364]	; (8000bac <MCAL_I2C_Init+0x200>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	81fb      	strh	r3, [r7, #14]

		/* Write FREQ on I2C_CR2 */
		I2Cx->CR2 &= ~(I2C_CR2_FREQ_Msk);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (FreqRange << I2C_CR2_FREQ_Pos);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	605a      	str	r2, [r3, #4]
		//*******************************************************************************
		//Configure the clock control registers
		//		--> Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode) in (I2C_CCR)

		/* Set Master Mode Selection --> Standard or Fast Mode */
		TempReg = I2C_Config->I2C_Master_Mode_Selection;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	82fb      	strh	r3, [r7, #22]

		if(I2C_Config->I2C_Master_Mode_Selection == I2C_Master_Mode_Selection_SM)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10a      	bne.n	8000a82 <MCAL_I2C_Init+0xd6>
			/* Calculate CCR value from the equation <Standard Mode> */
			//Thigh = CCR * TPClk1
			//Ti2cclock = Thigh + Tlow ------> Thigh = Ti2cclock / 2
			//CCR = Ti2cclock / (2 * TPClk1)
			//CCR = FPClk1 / (2 * Fi2cclock)
			CCR_Val = (uint16_t)(PClk1 / (I2C_Config->I2C_ClockSpeed << 1));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a78:	81bb      	strh	r3, [r7, #12]

			TempReg |= CCR_Val;
 8000a7a:	8afa      	ldrh	r2, [r7, #22]
 8000a7c:	89bb      	ldrh	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	82fb      	strh	r3, [r7, #22]
		{
			//Fast Mode is not supported
		}

		/* Write CCR Value on I2C_CCR */
		I2Cx->CCR = TempReg;
 8000a82:	8afa      	ldrh	r2, [r7, #22]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	61da      	str	r2, [r3, #28]
		//		--> Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode) in (I2C_TRISE)
		//		--> the maximum allowed SCL rise time is 1000 ns.
		//		--> If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
		//			therefore the TRISE[5:0] bits must be programmed with 09h.
		//			(1000 ns / 125 ns = 8 + 1)
		RiseTime = FreqRange + 1;
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	817b      	strh	r3, [r7, #10]
		I2Cx->TRISE |= RiseTime;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a1a      	ldr	r2, [r3, #32]
 8000a92:	897b      	ldrh	r3, [r7, #10]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	621a      	str	r2, [r3, #32]
		//*******************************************************************************


		/*-------------------------------Initialize the I2C_CR1 Register Configuration --------------------------*/
		I2Cx->CR1 |= (I2C_Config->I2C_Mode | I2C_Config->I2C_General_Call_Control | I2C_Config->I2C_Clock_Stretching | I2C_Config->I2C_ACK_Control);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	8911      	ldrh	r1, [r2, #8]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	89d2      	ldrh	r2, [r2, #14]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	b291      	uxth	r1, r2
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	8952      	ldrh	r2, [r2, #10]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	b291      	uxth	r1, r2
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	8992      	ldrh	r2, [r2, #12]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	b292      	uxth	r2, r2
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]

		/*-------------------------------Initialize the I2C_CR2 Register Configuration --------------------------*/
		//we do the configuration of the clock & we will do configuration of Interrupts if we are a slave
		/* we use Interrupt Mechanism when we are in Slave Mode */
		if(I2C_Config->PF_Slave_Event_CallBack != NULL)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d032      	beq.n	8000b2e <MCAL_I2C_Init+0x182>
		{
			/* Enable all Interrupts Slave */
			//Bit 8 ITERREN: Error interrupt enable
			I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	605a      	str	r2, [r3, #4]
			//Bit 9 ITEVTEN: Event interrupt enable
			I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	605a      	str	r2, [r3, #4]
			//Bit 10 ITBUFEN: Buffer interrupt enable
			I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	605a      	str	r2, [r3, #4]

			/* Enable Interrupts from NVIC */
			if(I2Cx == I2C1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a2b      	ldr	r2, [pc, #172]	; (8000b9c <MCAL_I2C_Init+0x1f0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d10c      	bne.n	8000b0e <MCAL_I2C_Init+0x162>
			{
				NVIC_I2C1_EV_IRQ31_ENABLE;
 8000af4:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <MCAL_I2C_Init+0x204>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <MCAL_I2C_Init+0x204>)
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	6013      	str	r3, [r2, #0]
				NVIC_I2C1_ER_IRQ32_ENABLE;
 8000b00:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <MCAL_I2C_Init+0x208>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <MCAL_I2C_Init+0x208>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	e00f      	b.n	8000b2e <MCAL_I2C_Init+0x182>
			}
			else if(I2Cx == I2C2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a25      	ldr	r2, [pc, #148]	; (8000ba8 <MCAL_I2C_Init+0x1fc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10b      	bne.n	8000b2e <MCAL_I2C_Init+0x182>
			{
				NVIC_I2C2_EV_IRQ33_ENABLE;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MCAL_I2C_Init+0x208>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <MCAL_I2C_Init+0x208>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6013      	str	r3, [r2, #0]
				NVIC_I2C2_ER_IRQ34_ENABLE;
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <MCAL_I2C_Init+0x208>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MCAL_I2C_Init+0x208>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6013      	str	r3, [r2, #0]
		}

		/*-------------------------------Initialize the I2C_OAR1 Register Configuration --------------------------*/
		/*-------------------------------Initialize the I2C_OAR2 Register Configuration --------------------------*/
		//Set Primary address of the slave & choose the slave address mode
		TempReg = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	82fb      	strh	r3, [r7, #22]
		TempReg |= I2C_Config->I2C_Slave_Device_Address.I2C_Slave_Address_Length;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	8a1a      	ldrh	r2, [r3, #16]
 8000b36:	8afb      	ldrh	r3, [r7, #22]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	82fb      	strh	r3, [r7, #22]
		TempReg |= (I2C_Config->I2C_Slave_Device_Address.I2C_Primary_Slave_Address << I2C_OAR1_ADD_Pos);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	8a9b      	ldrh	r3, [r3, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = TempReg;
 8000b4e:	8afa      	ldrh	r2, [r7, #22]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	609a      	str	r2, [r3, #8]

		//check if Dual address is enable
		if(I2C_Config->I2C_Slave_Device_Address.I2C_Slave_Address_DUAL == I2C_Slave_Address_DUAL_Enable)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	8a5b      	ldrh	r3, [r3, #18]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10d      	bne.n	8000b78 <MCAL_I2C_Init+0x1cc>
		{
			//Set Secondary address of the slave & enable the dual slave address mode
			TempReg = I2C_Slave_Address_DUAL_Enable;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	82fb      	strh	r3, [r7, #22]
			TempReg |= (I2C_Config->I2C_Slave_Device_Address.I2C_Secondary_Slave_Address << I2C_OAR2_ADD2_Pos);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	8adb      	ldrh	r3, [r3, #22]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = TempReg;
 8000b72:	8afa      	ldrh	r2, [r7, #22]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60da      	str	r2, [r3, #12]
		}


		/*-------------------------------Initialize the I2C_SR1 Register Configuration --------------------------*/
		/*-------------------------------Initialize the I2C_SR2 Register Configuration --------------------------*/
		I2Cx->SR1 = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]


		/*-------------------------------Enable the Peripheral --------------------------*/
		I2Cx->CR1 |= (I2C_CR1_PE_Msk);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f043 0201 	orr.w	r2, r3, #1
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
	}
	else if(I2C_Config->I2C_Mode == I2C_Mode_SMBus)
	{
		//SMBus is not supported
	}
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bdb0      	pop	{r4, r5, r7, pc}
 8000b98:	007a1200 	.word	0x007a1200
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	2000006c 	.word	0x2000006c
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000e104 	.word	0xe000e104

08000bb8 <MCAL_GPIO_I2C_Set_Pins>:
 * @param [in] 	-I2Cx: it is an instance from I2C (x --> 1..2)
 * @retval 		-none
 * Note			-we should enable the corresponding AFIO & GPIO in RCC clock also called after MCAL_I2C_Init()
================================================================**/
void MCAL_GPIO_I2C_Set_Pins(I2C_TypeDef *I2Cx)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	/*
	 * I2Cx_SCL --> Alternate function open drain
	 * I2Cx_SDA --> Alternate function open drain
	 */

	if(I2Cx == I2C1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <MCAL_GPIO_I2C_Set_Pins+0x88>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d118      	bne.n	8000bfa <MCAL_GPIO_I2C_Set_Pins+0x42>
		 * SCL --> PB6
		 * SDA --> PB7
		 */
		//*******************************************************************************
		//Configure SCL of I2C1
		PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 8000bc8:	2340      	movs	r3, #64	; 0x40
 8000bca:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_OD;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481a      	ldr	r0, [pc, #104]	; (8000c44 <MCAL_GPIO_I2C_Set_Pins+0x8c>)
 8000bdc:	f7ff fccb 	bl	8000576 <MCAL_GPIO_Init>
		//*******************************************************************************

		//*******************************************************************************
		//Configure SDA of I2C1
		PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_OD;
 8000be4:	2307      	movs	r3, #7
 8000be6:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <MCAL_GPIO_I2C_Set_Pins+0x8c>)
 8000bf4:	f7ff fcbf 	bl	8000576 <MCAL_GPIO_Init>
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_OD;
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
		MCAL_GPIO_Init(GPIOB, &PinCFG);
		//*******************************************************************************
	}
}
 8000bf8:	e01d      	b.n	8000c36 <MCAL_GPIO_I2C_Set_Pins+0x7e>
	else if(I2Cx == I2C2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MCAL_GPIO_I2C_Set_Pins+0x90>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d119      	bne.n	8000c36 <MCAL_GPIO_I2C_Set_Pins+0x7e>
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_OD;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <MCAL_GPIO_I2C_Set_Pins+0x8c>)
 8000c18:	f7ff fcad 	bl	8000576 <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
 8000c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c20:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_OD;
 8000c22:	2307      	movs	r3, #7
 8000c24:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MCAL_GPIO_I2C_Set_Pins+0x8c>)
 8000c32:	f7ff fca0 	bl	8000576 <MCAL_GPIO_Init>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40005800 	.word	0x40005800

08000c4c <MCAL_I2C_Master_Tx>:
 * @param [in] 	-start: it is determine that we send start or repeated start
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_I2C_Master_Tx(I2C_TypeDef *I2Cx, uint16_t Device_Address, uint8_t *Data_Out, uint16_t Data_Length, Stop_Generation stop, Start_State start)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	461a      	mov	r2, r3
 8000c58:	460b      	mov	r3, r1
 8000c5a:	817b      	strh	r3, [r7, #10]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	813b      	strh	r3, [r7, #8]
	int i = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
	 * so any code exist in while should (check flag || check any polling conditions)
	 */

	//*******************************************************************************
	//1.Send Start Condition to switch the device from slave to master
	I2C_Generate_Start_Condition(I2Cx, Fun_enable, Start);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fd0b 	bl	8000684 <I2C_Generate_Start_Condition>
	//*******************************************************************************

	//*******************************************************************************
	//2.Wait for Event5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_Get_Flag_Status(I2Cx, EV5)));
 8000c6e:	bf00      	nop
 8000c70:	2101      	movs	r1, #1
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fd30 	bl	80006d8 <I2C_Get_Flag_Status>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f8      	beq.n	8000c70 <MCAL_I2C_Master_Tx+0x24>
	//*******************************************************************************

	//*******************************************************************************
	//3.Send Device Address
	I2C_Send_Address(I2Cx, Device_Address, I2C_Direction_Transimitter);
 8000c7e:	897b      	ldrh	r3, [r7, #10]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fda5 	bl	80007d4 <I2C_Send_Address>
	//*******************************************************************************

	//*******************************************************************************
	//4.Wait for Event6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_Get_Flag_Status(I2Cx, EV6)));
 8000c8a:	bf00      	nop
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fd22 	bl	80006d8 <I2C_Get_Flag_Status>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f8      	beq.n	8000c8c <MCAL_I2C_Master_Tx+0x40>
	//*******************************************************************************
	//5.Check	--> TRA: Transmitter/receiver
	//			--> BUSY: bus is busy or not
	//			--> MSL: Master/slave Mode
	//			--> TXE:  Data register empty
	while(!(I2C_Get_Flag_Status(I2Cx, MASTER_BYTE_TRANSMITTING)));
 8000c9a:	bf00      	nop
 8000c9c:	4915      	ldr	r1, [pc, #84]	; (8000cf4 <MCAL_I2C_Master_Tx+0xa8>)
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fd1a 	bl	80006d8 <I2C_Get_Flag_Status>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f8      	beq.n	8000c9c <MCAL_I2C_Master_Tx+0x50>
	//*******************************************************************************

	//*******************************************************************************
	//6.Write Data in DR
	for(i = 0; i < Data_Length; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e011      	b.n	8000cd4 <MCAL_I2C_Master_Tx+0x88>
	{
		I2Cx->DR = Data_Out[i];
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

		//*******************************************************************************
		//7.Wait for Event8
		//EV8: TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
		while(!(I2C_Get_Flag_Status(I2Cx, EV8)));
 8000cbe:	bf00      	nop
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fd08 	bl	80006d8 <I2C_Get_Flag_Status>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f8      	beq.n	8000cc0 <MCAL_I2C_Master_Tx+0x74>
	for(i = 0; i < Data_Length; i++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	893b      	ldrh	r3, [r7, #8]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbe9      	blt.n	8000cb0 <MCAL_I2C_Master_Tx+0x64>
	}
	//*******************************************************************************

	//*******************************************************************************
	//8.Stop Condition
	if(stop == With_Stop)
 8000cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d103      	bne.n	8000cec <MCAL_I2C_Master_Tx+0xa0>
	{
		I2C_Generate_Stop_Condition(I2Cx, Fun_enable);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff fdb4 	bl	8000854 <I2C_Generate_Stop_Condition>
	}
	//*******************************************************************************
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	00070080 	.word	0x00070080

08000cf8 <MCAL_I2C_Master_Rx>:
 * @param [in] 	-start: it is determine that we send start or repeated start
 * @retval 		-none
 * Note			-none
================================================================**/
void MCAL_I2C_Master_Rx(I2C_TypeDef *I2Cx, uint16_t Device_Address, uint8_t *Data_Out, uint16_t Data_Length, Stop_Generation stop, Start_State start)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	461a      	mov	r2, r3
 8000d04:	460b      	mov	r3, r1
 8000d06:	817b      	strh	r3, [r7, #10]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	813b      	strh	r3, [r7, #8]
	int i = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
	uint8_t Index = (I2Cx == I2C1)? I2C1_INDEX : I2C2_INDEX;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <MCAL_I2C_Master_Rx+0xe4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	74fb      	strb	r3, [r7, #19]

	//*******************************************************************************
	//1.Send Start Condition to switch the device from slave to master
	I2C_Generate_Start_Condition(I2Cx, Fun_enable, start);
 8000d20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d24:	461a      	mov	r2, r3
 8000d26:	2101      	movs	r1, #1
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fcab 	bl	8000684 <I2C_Generate_Start_Condition>
	//*******************************************************************************

	//*******************************************************************************
	//2.Wait for Event5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_Get_Flag_Status(I2Cx, EV5)));
 8000d2e:	bf00      	nop
 8000d30:	2101      	movs	r1, #1
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f7ff fcd0 	bl	80006d8 <I2C_Get_Flag_Status>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f8      	beq.n	8000d30 <MCAL_I2C_Master_Rx+0x38>
	//*******************************************************************************

	//*******************************************************************************
	//3.Send Device Address
	I2C_Send_Address(I2Cx, Device_Address, I2C_Direction_Receiver);
 8000d3e:	897b      	ldrh	r3, [r7, #10]
 8000d40:	2201      	movs	r2, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff fd45 	bl	80007d4 <I2C_Send_Address>
	//*******************************************************************************

	//*******************************************************************************
	//4.Wait for Event6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_Get_Flag_Status(I2Cx, EV6)));
 8000d4a:	bf00      	nop
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fcc2 	bl	80006d8 <I2C_Get_Flag_Status>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f8      	beq.n	8000d4c <MCAL_I2C_Master_Rx+0x54>
	//*******************************************************************************

	I2C_Acknowledge_Config(I2Cx, Fun_enable);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fd97 	bl	8000890 <I2C_Acknowledge_Config>

	/* Check Data length because if it is equal zero we won't receive any thing */
	if(Data_Length)
 8000d62:	893b      	ldrh	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01c      	beq.n	8000da2 <MCAL_I2C_Master_Rx+0xaa>
	{
		for(i = Data_Length; i > 1; i--)
 8000d68:	893b      	ldrh	r3, [r7, #8]
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e012      	b.n	8000d94 <MCAL_I2C_Master_Rx+0x9c>
		{
			//*******************************************************************************
			//5.Wait for Event7
			//EV7: RxNE = 1 cleared by reading DR register
			while(!(I2C_Get_Flag_Status(I2Cx, EV7)));
 8000d6e:	bf00      	nop
 8000d70:	2105      	movs	r1, #5
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fcb0 	bl	80006d8 <I2C_Get_Flag_Status>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f8      	beq.n	8000d70 <MCAL_I2C_Master_Rx+0x78>
			//*******************************************************************************

			//*******************************************************************************
			//6.Read Data from DR
			*Data_Out = I2Cx->DR;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	701a      	strb	r2, [r3, #0]
			Data_Out++;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
		for(i = Data_Length; i > 1; i--)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	dce9      	bgt.n	8000d6e <MCAL_I2C_Master_Rx+0x76>
			//*******************************************************************************
		}

		I2C_Acknowledge_Config(I2Cx, Fun_disable);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fd77 	bl	8000890 <I2C_Acknowledge_Config>
	}

	//*******************************************************************************
	//7.Stop Condition
	if(stop == With_Stop)
 8000da2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <MCAL_I2C_Master_Rx+0xba>
	{
		I2C_Generate_Stop_Condition(I2Cx, Fun_enable);
 8000daa:	2101      	movs	r1, #1
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f7ff fd51 	bl	8000854 <I2C_Generate_Stop_Condition>
	}
	//*******************************************************************************

	//*******************************************************************************
	//Re-Enabel Acknowledge
	if(Gl_AI2C_CFG[Index].I2C_ACK_Control == I2C_ACK_Control_Enable)
 8000db2:	7cfa      	ldrb	r2, [r7, #19]
 8000db4:	490a      	ldr	r1, [pc, #40]	; (8000de0 <MCAL_I2C_Master_Rx+0xe8>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	330c      	adds	r3, #12
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc8:	d103      	bne.n	8000dd2 <MCAL_I2C_Master_Rx+0xda>
	{
		I2C_Acknowledge_Config(I2Cx, Fun_enable);
 8000dca:	2101      	movs	r1, #1
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f7ff fd5f 	bl	8000890 <I2C_Acknowledge_Config>
	}
	//*******************************************************************************
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	2000006c 	.word	0x2000006c

08000de4 <I2C1_EV_IRQHandler>:
{
	return (uint8_t)(I2Cx->DR);
}

void I2C1_EV_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_Read = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
	I2C_TypeDef *I2Cx = I2C1;
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <I2C1_EV_IRQHandler+0xe0>)
 8000df0:	617b      	str	r3, [r7, #20]

	//interrupt handling for Master & Slave mode of a device
	uint32_t temp1, temp2, temp3;

	//*******************************************************************************
	temp1 = ( (I2Cx->CR2) & (I2C_CR2_ITEVTEN) );
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dfa:	613b      	str	r3, [r7, #16]
	temp2 = ( (I2Cx->CR2) & (I2C_CR2_ITBUFEN) );
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e04:	60fb      	str	r3, [r7, #12]
	//*******************************************************************************

	//*******************************************************************************
	temp3 = ( (I2Cx->SR1) & (I2C_SR1_STOPF) );
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00c      	beq.n	8000e30 <I2C1_EV_IRQHandler+0x4c>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d009      	beq.n	8000e30 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummy_Read = I2Cx->SR1;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff fd4e 	bl	80008cc <Slave_States>
	}
	//*******************************************************************************

	//*******************************************************************************
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d012      	beq.n	8000e66 <I2C1_EV_IRQHandler+0x82>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00f      	beq.n	8000e66 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d109      	bne.n	8000e66 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummy_Read = I2Cx->SR1;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	607b      	str	r3, [r7, #4]
			dummy_Read = I2Cx->SR2;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000e5e:	2102      	movs	r1, #2
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff fd33 	bl	80008cc <Slave_States>
		}
	}
	//*******************************************************************************

	//*******************************************************************************
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00c      	beq.n	8000e90 <I2C1_EV_IRQHandler+0xac>
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d009      	beq.n	8000e90 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000e88:	2103      	movs	r1, #3
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff fd1e 	bl	80008cc <Slave_States>
		}
	}
	//*******************************************************************************

	//*******************************************************************************
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e98:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00c      	beq.n	8000eba <I2C1_EV_IRQHandler+0xd6>
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d103      	bne.n	8000eba <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff fd09 	bl	80008cc <Slave_States>
		}
	}
	//*******************************************************************************
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40005400 	.word	0x40005400

08000ec8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <MCAL_RCC_GetSYSCLKFreq>:

const uint8_t APBprescaler_Table[8] = {0, 0, 0, 0, 1, 2, 3, 4};
const uint8_t AHBprescaler_Table[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MCAL_RCC_GetSYSCLKFreq+0x30>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d006      	beq.n	8000f0c <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d302      	bcc.n	8000f08 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d004      	beq.n	8000f10 <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000f06:	e005      	b.n	8000f14 <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000f0a:	e003      	b.n	8000f14 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 1:
		return HSE_CLK;		//we should know the frequency of the external clock --> To Do
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000f0e:	e001      	b.n	8000f14 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 2:
		return 16000000;	//we should calculate PLLCLK and PLLMUL to get this value --> To Do
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000f12:	e7ff      	b.n	8000f14 <MCAL_RCC_GetSYSCLKFreq+0x28>
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	007a1200 	.word	0x007a1200
 8000f24:	00f42400 	.word	0x00f42400

08000f28 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	return MCAL_RCC_GetSYSCLKFreq() >> AHBprescaler_Table[((RCC->CFGR >> 4) & 0xF)];
 8000f2c:	f7ff ffde 	bl	8000eec <MCAL_RCC_GetSYSCLKFreq>
 8000f30:	4601      	mov	r1, r0
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	f003 030f 	and.w	r3, r3, #15
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <MCAL_RCC_GetHCLKFreq+0x24>)
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
//	1011: SYSCLK divided by 16
//	1100: SYSCLK divided by 64
//	1101: SYSCLK divided by 128
//	1110: SYSCLK divided by 256
//	1111: SYSCLK divided by 512
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	080011e0 	.word	0x080011e0

08000f50 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLKFreq() >> APBprescaler_Table[((RCC->CFGR >> 8) & (0b111))]);
 8000f54:	f7ff ffe8 	bl	8000f28 <MCAL_RCC_GetHCLKFreq>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	080011d8 	.word	0x080011d8

08000f78 <SPI1_IRQHandler>:
 * ======================================================================
 * 								ISR
 * ======================================================================
 */
void SPI1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	struct S_IRQ_Source irq_src;

	irq_src.TXE = ((SPI1->SR >> SPI_SR_TXE) & 1);
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <SPI1_IRQHandler+0x54>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	793b      	ldrb	r3, [r7, #4]
 8000f8c:	f362 0300 	bfi	r3, r2, #0, #1
 8000f90:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR >> SPI_SR_RXNE) & 1);
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <SPI1_IRQHandler+0x54>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	793b      	ldrb	r3, [r7, #4]
 8000f9e:	f362 0341 	bfi	r3, r2, #1, #1
 8000fa2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR >> 4) & 1);
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <SPI1_IRQHandler+0x54>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	f362 0382 	bfi	r3, r2, #2, #1
 8000fb6:	713b      	strb	r3, [r7, #4]

	Gl_ASPI_CFG[SPI1_INDEX]->PF_IRQ_CallBack(irq_src);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SPI1_IRQHandler+0x58>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	7938      	ldrb	r0, [r7, #4]
 8000fc0:	4798      	blx	r3
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	2000001c 	.word	0x2000001c

08000fd4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	struct S_IRQ_Source irq_src;

	irq_src.TXE = ((SPI2->SR >> SPI_SR_TXE) & 1);
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <SPI2_IRQHandler+0x54>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	f362 0300 	bfi	r3, r2, #0, #1
 8000fec:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR >> SPI_SR_RXNE) & 1);
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <SPI2_IRQHandler+0x54>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	793b      	ldrb	r3, [r7, #4]
 8000ffa:	f362 0341 	bfi	r3, r2, #1, #1
 8000ffe:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR >> 4) & 1);
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SPI2_IRQHandler+0x54>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	f362 0382 	bfi	r3, r2, #2, #1
 8001012:	713b      	strb	r3, [r7, #4]

	Gl_ASPI_CFG[SPI2_INDEX]->PF_IRQ_CallBack(irq_src);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SPI2_IRQHandler+0x58>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	7938      	ldrb	r0, [r7, #4]
 800101c:	4798      	blx	r3
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40003800 	.word	0x40003800
 800102c:	2000001c 	.word	0x2000001c

08001030 <USART1_IRQHandler>:
}


//ISR for USARTx
void USART1_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	Gl_AUARTx_CFG[USART1_INDEX]->UART_PF_IRQ_CallBack();
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <USART1_IRQHandler+0x10>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	4798      	blx	r3
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000024 	.word	0x20000024

08001044 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	Gl_AUARTx_CFG[USART2_INDEX]->UART_PF_IRQ_CallBack();
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <USART2_IRQHandler+0x10>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	4798      	blx	r3
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000024 	.word	0x20000024

08001058 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	Gl_AUARTx_CFG[USART3_INDEX]->UART_PF_IRQ_CallBack();
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <USART3_IRQHandler+0x10>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4798      	blx	r3
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000024 	.word	0x20000024

0800106c <main>:

//uint8_t ch;


int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
	Clock_Init();
 8001072:	f000 f839 	bl	80010e8 <Clock_Init>
	//	MCAL_SPI_Init(SPI1, &SPI1_CFG);
	//	MCAL_GPIO_SPI_Set_Pins(SPI1);


	/*----------------------------Test Case1-------------------------------*/
	unsigned char Write_Data[] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7};
 8001076:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <main+0x78>)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001080:	6018      	str	r0, [r3, #0]
 8001082:	3304      	adds	r3, #4
 8001084:	8019      	strh	r1, [r3, #0]
 8001086:	3302      	adds	r3, #2
 8001088:	0c0a      	lsrs	r2, r1, #16
 800108a:	701a      	strb	r2, [r3, #0]
	unsigned char Read_Data[7] = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 8001096:	f7ff f86b 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_Nbytes(0xAF, Write_Data, 7);
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2207      	movs	r2, #7
 80010a0:	4619      	mov	r1, r3
 80010a2:	20af      	movs	r0, #175	; 0xaf
 80010a4:	f7ff f886 	bl	80001b4 <EEPROM_Write_Nbytes>
	EEPROM_Read_Nbytes(0xAF, Read_Data, 7);
 80010a8:	463b      	mov	r3, r7
 80010aa:	2207      	movs	r2, #7
 80010ac:	4619      	mov	r1, r3
 80010ae:	20af      	movs	r0, #175	; 0xaf
 80010b0:	f7ff f8d2 	bl	8000258 <EEPROM_Read_Nbytes>


	/*----------------------------Test Case2-------------------------------*/
	Write_Data[0] = 0xA;
 80010b4:	230a      	movs	r3, #10
 80010b6:	723b      	strb	r3, [r7, #8]
	Write_Data[1] = 0xB;
 80010b8:	230b      	movs	r3, #11
 80010ba:	727b      	strb	r3, [r7, #9]
	Write_Data[2] = 0xC;
 80010bc:	230c      	movs	r3, #12
 80010be:	72bb      	strb	r3, [r7, #10]
	Write_Data[3] = 0xD;
 80010c0:	230d      	movs	r3, #13
 80010c2:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_Nbytes(0xFFF, Write_Data, 4);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	2204      	movs	r2, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010d0:	f7ff f870 	bl	80001b4 <EEPROM_Write_Nbytes>
	EEPROM_Read_Nbytes(0xFFF, Read_Data, 4);
 80010d4:	463b      	mov	r3, r7
 80010d6:	2204      	movs	r2, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010de:	f7ff f8bb 	bl	8000258 <EEPROM_Read_Nbytes>


	/* Loop forever */
	while(1)
 80010e2:	e7fe      	b.n	80010e2 <main+0x76>
 80010e4:	080011d0 	.word	0x080011d0

080010e8 <Clock_Init>:
//
//#endif
//}

void Clock_Init()
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	//open clock of AFIO
	RCC_AFIO_CLK_EN();
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <Clock_Init+0x30>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <Clock_Init+0x30>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6193      	str	r3, [r2, #24]

	//open clock of GPIOA
	RCC_GPIOA_CLK_EN();
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <Clock_Init+0x30>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <Clock_Init+0x30>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]

	//open clock of GPIOB
	RCC_GPIOB_CLK_EN();
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <Clock_Init+0x30>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <Clock_Init+0x30>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6193      	str	r3, [r2, #24]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000

0800111c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001120:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114a:	f000 f811 	bl	8001170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff ff8d 	bl	800106c <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   r0, =_estack
 8001154:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001160:	080011f8 	.word	0x080011f8
  ldr r2, =_sbss
 8001164:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001168:	200000a4 	.word	0x200000a4

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <__libc_init_array>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	2500      	movs	r5, #0
 8001174:	4e0c      	ldr	r6, [pc, #48]	; (80011a8 <__libc_init_array+0x38>)
 8001176:	4c0d      	ldr	r4, [pc, #52]	; (80011ac <__libc_init_array+0x3c>)
 8001178:	1ba4      	subs	r4, r4, r6
 800117a:	10a4      	asrs	r4, r4, #2
 800117c:	42a5      	cmp	r5, r4
 800117e:	d109      	bne.n	8001194 <__libc_init_array+0x24>
 8001180:	f000 f81a 	bl	80011b8 <_init>
 8001184:	2500      	movs	r5, #0
 8001186:	4e0a      	ldr	r6, [pc, #40]	; (80011b0 <__libc_init_array+0x40>)
 8001188:	4c0a      	ldr	r4, [pc, #40]	; (80011b4 <__libc_init_array+0x44>)
 800118a:	1ba4      	subs	r4, r4, r6
 800118c:	10a4      	asrs	r4, r4, #2
 800118e:	42a5      	cmp	r5, r4
 8001190:	d105      	bne.n	800119e <__libc_init_array+0x2e>
 8001192:	bd70      	pop	{r4, r5, r6, pc}
 8001194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001198:	4798      	blx	r3
 800119a:	3501      	adds	r5, #1
 800119c:	e7ee      	b.n	800117c <__libc_init_array+0xc>
 800119e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a2:	4798      	blx	r3
 80011a4:	3501      	adds	r5, #1
 80011a6:	e7f2      	b.n	800118e <__libc_init_array+0x1e>
 80011a8:	080011f0 	.word	0x080011f0
 80011ac:	080011f0 	.word	0x080011f0
 80011b0:	080011f0 	.word	0x080011f0
 80011b4:	080011f4 	.word	0x080011f4

080011b8 <_init>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr

080011c4 <_fini>:
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	bf00      	nop
 80011c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ca:	bc08      	pop	{r3}
 80011cc:	469e      	mov	lr, r3
 80011ce:	4770      	bx	lr
