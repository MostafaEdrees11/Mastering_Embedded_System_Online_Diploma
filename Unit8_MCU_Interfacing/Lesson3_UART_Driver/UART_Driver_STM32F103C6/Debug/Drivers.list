
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000097c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ac4  08000acc  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac4  08000ac4  00010ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ac8  08000ac8  00010ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000acc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000acc  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004014  00000000  00000000  00010af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f9  00000000  00000000  00014b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  00015502  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016128  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c26  00000000  00000000  000162a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020f5  00000000  00000000  00016ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b49a  00000000  00000000  00018fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024455  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  000244d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a94 	.word	0x08000a94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a94 	.word	0x08000a94

08000170 <EXTI0_IRQHandler>:
//ISR Functions:
//-*-*-*-*-*-*-*-*-*-*-*

/* EXTI0 */
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000002c 	.word	0x2000002c

08000194 <EXTI1_IRQHandler>:

/* EXTI1 */
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000002c 	.word	0x2000002c

080001b8 <EXTI2_IRQHandler>:

/* EXTI2 */
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000002c 	.word	0x2000002c

080001dc <EXTI3_IRQHandler>:

/* EXTI3 */
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000002c 	.word	0x2000002c

08000200 <EXTI4_IRQHandler>:

/* EXTI4 */
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	SET_BIT(EXTI->PR,EXTI4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[EXTI4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000002c 	.word	0x2000002c

08000224 <EXTI9_5_IRQHandler>:

/* EXTI9_5 */
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_5)
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI5);
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI5]();
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_6)
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI6);
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI6]();
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_7)
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI7);
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI7]();
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_8)
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI8);
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI8]();
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_9)
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI9);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI9]();
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000002c 	.word	0x2000002c

080002cc <EXTI15_10_IRQHandler>:

/* EXTI15_10 */
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//clear the Pending Register by writing a ‘1’ into the bit.
	if(EXTI->PR & GPIO_PIN_10)
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
	{
		SET_BIT(EXTI->PR,EXTI10);
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI10]();
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_11)
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
	{
		SET_BIT(EXTI->PR,EXTI11);
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI11]();
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_12)
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
	{
		SET_BIT(EXTI->PR,EXTI12);
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI12]();
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_13)
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
	{
		SET_BIT(EXTI->PR,EXTI13);
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI13]();
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_14)
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
	{
		SET_BIT(EXTI->PR,EXTI14);
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI14]();
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	}

	if(EXTI->PR & GPIO_PIN_15)
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
	{
		SET_BIT(EXTI->PR,EXTI15);
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]

		//Call IRQ CallBack
		GP_IRQ_CallBack[EXTI15]();
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
	}
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000002c 	.word	0x2000002c

08000390 <Get_PIN_Position>:
 * @param [in] 	-PinNumber: Set PIN number according to @ref GPIO_PINs_define.
 * @retval 		-it return the position of the PIN
 * Note			-none
================================================================**/
uint8_t Get_PIN_Position(uint16_t PIN_Number)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PIN_Number)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_PIN_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_PIN_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_PIN_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_PIN_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_PIN_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_PIN_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_PIN_Position+0x7a>
 80003b8:	e037      	b.n	800042a <Get_PIN_Position+0x9a>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_PIN_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_PIN_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_PIN_Position+0x8a>
 80003c6:	e030      	b.n	800042a <Get_PIN_Position+0x9a>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d023      	beq.n	8000416 <Get_PIN_Position+0x86>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_PIN_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d019      	beq.n	800040e <Get_PIN_Position+0x7e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d018      	beq.n	8000412 <Get_PIN_Position+0x82>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d011      	beq.n	800040a <Get_PIN_Position+0x7a>
 80003e6:	e020      	b.n	800042a <Get_PIN_Position+0x9a>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d017      	beq.n	800041e <Get_PIN_Position+0x8e>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_PIN_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d00f      	beq.n	800041a <Get_PIN_Position+0x8a>
 80003fa:	e016      	b.n	800042a <Get_PIN_Position+0x9a>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d00f      	beq.n	8000422 <Get_PIN_Position+0x92>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d00e      	beq.n	8000426 <Get_PIN_Position+0x96>
 8000408:	e00f      	b.n	800042a <Get_PIN_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e00e      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e00c      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e00a      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e008      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e006      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e004      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e002      	b.n	800042c <Get_PIN_Position+0x9c>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e000      	b.n	800042c <Get_PIN_Position+0x9c>
		break;
	}

	return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 Package has only GPIO A,B Part of C,D exported as external PINs from the MCU
================================================================**/
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PIN_Configuration_t *PIN_Config)
{
 8000436:	b590      	push	{r4, r7, lr}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *Configuration_Register = NULL;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
	volatile uint8_t pin_configuration;

	//check if Configuration_Register is CRL or CRH
	Configuration_Register = (PIN_Config->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	2bff      	cmp	r3, #255	; 0xff
 800044a:	d801      	bhi.n	8000450 <MCAL_GPIO_Init+0x1a>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	e001      	b.n	8000454 <MCAL_GPIO_Init+0x1e>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3304      	adds	r3, #4
 8000454:	60fb      	str	r3, [r7, #12]

	//Reset CNF0[1:0] MODE0[1:0]
	(*Configuration_Register) &= ~(0xf << Get_PIN_Position(PIN_Config->GPIO_PinNumber));
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff98 	bl	8000390 <Get_PIN_Position>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	230f      	movs	r3, #15
 8000466:	4093      	lsls	r3, r2
 8000468:	43da      	mvns	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	401a      	ands	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	601a      	str	r2, [r3, #0]
	 * ------------------
	 * |  3	| 2 | 1	| 0	|
	 * ------------------
	 */
	//check if PIN is O/P or I/P
	if((PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_PP) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_OD) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_AF_PP) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_OUTPUT_AF_OD))
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	2b04      	cmp	r3, #4
 800047a:	d00b      	beq.n	8000494 <MCAL_GPIO_Init+0x5e>
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	2b05      	cmp	r3, #5
 8000482:	d007      	beq.n	8000494 <MCAL_GPIO_Init+0x5e>
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	2b06      	cmp	r3, #6
 800048a:	d003      	beq.n	8000494 <MCAL_GPIO_Init+0x5e>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	2b07      	cmp	r3, #7
 8000492:	d10f      	bne.n	80004b4 <MCAL_GPIO_Init+0x7e>
		 * 00: General purpose output push-pull		--> GPIO_MODE_OUTPUT_PP		>>	0x00000004u
		 * 01: General purpose output Open-drain	--> GPIO_MODE_OUTPUT_OD		>>	0x00000005u
		 * 10: Alternate function output Push-pull	--> GPIO_MODE_OUTPUT_AF_PP	>>	0x00000006u
		 * 11: Alternate function output Open-drain	--> GPIO_MODE_OUTPUT_AF_OD	>>	0x00000007u
		 */
		pin_configuration = ((((PIN_Config->GPIO_PinMODE - 4) << 2) | (PIN_Config->GPIO_PinSPEED)) & 0x0f);
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	3b04      	subs	r3, #4
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	b25a      	sxtb	r2, r3
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	78db      	ldrb	r3, [r3, #3]
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	72fb      	strb	r3, [r7, #11]
 80004b2:	e033      	b.n	800051c <MCAL_GPIO_Init+0xe6>
		 * 11: Input with PU or PD	--> GPIO_MODE_INPUT_PU
		 * 		PU: ODR --> 1
		 * 		PD: ODR --> 0
		 */
		//check if PIN is Analog or floating input
		if((PIN_Config->GPIO_PinMODE == GPIO_MODE_ANALOG) || (PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_FLO))
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d003      	beq.n	80004c4 <MCAL_GPIO_Init+0x8e>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d108      	bne.n	80004d6 <MCAL_GPIO_Init+0xa0>
		{
			pin_configuration = ((((PIN_Config->GPIO_PinMODE) << 2) | (0x0)) & 0x0f);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	789b      	ldrb	r3, [r3, #2]
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	f003 030f 	and.w	r3, r3, #15
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	72fb      	strb	r3, [r7, #11]
 80004d4:	e022      	b.n	800051c <MCAL_GPIO_Init+0xe6>
		}
		else if((PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_AF)) //Alternative I/P
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b08      	cmp	r3, #8
 80004dc:	d102      	bne.n	80004e4 <MCAL_GPIO_Init+0xae>
		{
			pin_configuration = ((((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0f);
 80004de:	2304      	movs	r3, #4
 80004e0:	72fb      	strb	r3, [r7, #11]
 80004e2:	e01b      	b.n	800051c <MCAL_GPIO_Init+0xe6>
		}
		else //input PU or PD
		{
			pin_configuration = ((((PIN_Config->GPIO_PinMODE) << 2) | (0x0)) & 0x0f);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	72fb      	strb	r3, [r7, #11]
			/*
			 * Table 20. Port bit configuration table
			 * input PU >> PxODR register = 1
			 * input PD >> PxODR register = 0
			 */
			if(PIN_Config->GPIO_PinMODE == GPIO_MODE_INPUT_PU) //I/P pull up
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d107      	bne.n	800050c <MCAL_GPIO_Init+0xd6>
			{
				GPIOx->ODR |= ((uint32_t)(PIN_Config->GPIO_PinNumber));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	8812      	ldrh	r2, [r2, #0]
 8000504:	431a      	orrs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	e007      	b.n	800051c <MCAL_GPIO_Init+0xe6>
			}
			else //I/P pull down
			{
				GPIOx->ODR &= ~((uint32_t)(PIN_Config->GPIO_PinNumber));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	43db      	mvns	r3, r3
 8000516:	401a      	ands	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//Put the values of CNF & MODE in CRL or CRH
	(*Configuration_Register) |= (pin_configuration << Get_PIN_Position(PIN_Config->GPIO_PinNumber));
 800051c:	7afb      	ldrb	r3, [r7, #11]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461c      	mov	r4, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff32 	bl	8000390 <Get_PIN_Position>
 800052c:	4603      	mov	r3, r0
 800052e:	fa04 f203 	lsl.w	r2, r4, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <MCAL_RCC_GetSYSCLKFreq>:

const uint8_t APBprescaler_Table[8] = {0, 0, 0, 0, 1, 2, 3, 4};
const uint8_t AHBprescaler_Table[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	089b      	lsrs	r3, r3, #2
 800054e:	f003 0303 	and.w	r3, r3, #3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d006      	beq.n	8000564 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000556:	2b01      	cmp	r3, #1
 8000558:	d302      	bcc.n	8000560 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d004      	beq.n	8000568 <MCAL_RCC_GetSYSCLKFreq+0x24>
 800055e:	e005      	b.n	800056c <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000562:	e003      	b.n	800056c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 1:
		return HSE_CLK;		//we should know the frequency of the external clock --> To Do
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000566:	e001      	b.n	800056c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 2:
		return 16000000;	//we should calculate PLLCLK and PLLMUL to get this value --> To Do
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <MCAL_RCC_GetSYSCLKFreq+0x38>)
 800056a:	e7ff      	b.n	800056c <MCAL_RCC_GetSYSCLKFreq+0x28>
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000
 8000578:	007a1200 	.word	0x007a1200
 800057c:	00f42400 	.word	0x00f42400

08000580 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	return MCAL_RCC_GetSYSCLKFreq() >> AHBprescaler_Table[((RCC->CFGR >> 4) & 0xF)];
 8000584:	f7ff ffde 	bl	8000544 <MCAL_RCC_GetSYSCLKFreq>
 8000588:	4601      	mov	r1, r0
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <MCAL_RCC_GetHCLKFreq+0x20>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	091b      	lsrs	r3, r3, #4
 8000590:	f003 030f 	and.w	r3, r3, #15
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	fa21 f303 	lsr.w	r3, r1, r3
//	1011: SYSCLK divided by 16
//	1100: SYSCLK divided by 64
//	1101: SYSCLK divided by 128
//	1110: SYSCLK divided by 256
//	1111: SYSCLK divided by 512
}
 800059c:	4618      	mov	r0, r3
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	08000ab4 	.word	0x08000ab4

080005a8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLKFreq() >> APBprescaler_Table[((RCC->CFGR >> 8) & (0b111))]);
 80005ac:	f7ff ffe8 	bl	8000580 <MCAL_RCC_GetHCLKFreq>
 80005b0:	4601      	mov	r1, r0
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	f003 0307 	and.w	r3, r3, #7
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	fa21 f303 	lsr.w	r3, r1, r3
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	08000aac 	.word	0x08000aac

080005d0 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLKFreq() >> APBprescaler_Table[((RCC->CFGR >> 11) & (0b111))]);
 80005d4:	f7ff ffd4 	bl	8000580 <MCAL_RCC_GetHCLKFreq>
 80005d8:	4601      	mov	r1, r0
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	0adb      	lsrs	r3, r3, #11
 80005e0:	f003 0307 	and.w	r3, r3, #7
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	fa21 f303 	lsr.w	r3, r1, r3
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	08000aac 	.word	0x08000aac

080005f8 <MCAL_UART_Init>:
 * @param [in] 	-UART_Config: it is a structure containing configuration of UART.
 * @retval 		-none
 * Note			-we implement Asynchronous mode
================================================================**/
void MCAL_UART_Init(USART_TypeDef *USARTx, UART_Configuration_t *UART_Config)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	uint32_t Pclk, BRR;

	Gl_UART_CFG = UART_Config;
 8000602:	4a5f      	ldr	r2, [pc, #380]	; (8000780 <MCAL_UART_Init+0x188>)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	6013      	str	r3, [r2, #0]

	//Enable Clock for UART
	if(USARTx == USART1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a5e      	ldr	r2, [pc, #376]	; (8000784 <MCAL_UART_Init+0x18c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d109      	bne.n	8000624 <MCAL_UART_Init+0x2c>
	{
		RCC_USART1_CLK_EN();
 8000610:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <MCAL_UART_Init+0x190>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a5c      	ldr	r2, [pc, #368]	; (8000788 <MCAL_UART_Init+0x190>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6193      	str	r3, [r2, #24]
		Gl_AUARTx_CFG[0] = UART_Config;
 800061c:	4a5b      	ldr	r2, [pc, #364]	; (800078c <MCAL_UART_Init+0x194>)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e01a      	b.n	800065a <MCAL_UART_Init+0x62>
	}
	else if(USARTx == USART2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a5a      	ldr	r2, [pc, #360]	; (8000790 <MCAL_UART_Init+0x198>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d109      	bne.n	8000640 <MCAL_UART_Init+0x48>
	{
		RCC_USART2_CLK_EN();
 800062c:	4b56      	ldr	r3, [pc, #344]	; (8000788 <MCAL_UART_Init+0x190>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	4a55      	ldr	r2, [pc, #340]	; (8000788 <MCAL_UART_Init+0x190>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000636:	61d3      	str	r3, [r2, #28]
		Gl_AUARTx_CFG[1] = UART_Config;
 8000638:	4a54      	ldr	r2, [pc, #336]	; (800078c <MCAL_UART_Init+0x194>)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	6053      	str	r3, [r2, #4]
 800063e:	e00c      	b.n	800065a <MCAL_UART_Init+0x62>
	}
	else if(USARTx == USART3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a54      	ldr	r2, [pc, #336]	; (8000794 <MCAL_UART_Init+0x19c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d108      	bne.n	800065a <MCAL_UART_Init+0x62>
	{
		RCC_USART3_CLK_EN();
 8000648:	4b4f      	ldr	r3, [pc, #316]	; (8000788 <MCAL_UART_Init+0x190>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a4e      	ldr	r2, [pc, #312]	; (8000788 <MCAL_UART_Init+0x190>)
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	61d3      	str	r3, [r2, #28]
		Gl_AUARTx_CFG[2] = UART_Config;
 8000654:	4a4d      	ldr	r2, [pc, #308]	; (800078c <MCAL_UART_Init+0x194>)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	6093      	str	r3, [r2, #8]
	}

	//Enable the USART by writing the UE bit in USART_CR1 register to 1.
	//Bit 13 UE: USART enable
	USARTx->CR1 |= (1 << 13);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60da      	str	r2, [r3, #12]

	//Set the UART MODE bit in USART_CR1
	USARTx->CR1 |= UART_Config->UART_MODE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	431a      	orrs	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	60da      	str	r2, [r3, #12]

	//Program the M bit in USART_CR1 to define the word length
	USARTx->CR1 |= UART_Config->UART_Payload_length;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	7852      	ldrb	r2, [r2, #1]
 800067c:	431a      	orrs	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60da      	str	r2, [r3, #12]

	//Program the number of stop bits in USART_CR2.
	USARTx->CR1 |= UART_Config->UART_Num_Stop_Bits;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	7892      	ldrb	r2, [r2, #2]
 800068a:	431a      	orrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	60da      	str	r2, [r3, #12]

	//Configure Parity
	USARTx->CR1 |= UART_Config->UART_Parity;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	78d2      	ldrb	r2, [r2, #3]
 8000698:	431a      	orrs	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60da      	str	r2, [r3, #12]

	//Configure Hardware Flow Control
	USARTx->CR1 |= UART_Config->UART_HW_FLOW_CTL;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	7a12      	ldrb	r2, [r2, #8]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]

	//Configure BaudRate (BRR)
	//Calculate the clock --> PCLK1 for USART2,3 & PCLK2 for USART1
	if(USARTx == USART1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <MCAL_UART_Init+0x18c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d103      	bne.n	80006bc <MCAL_UART_Init+0xc4>
		Pclk = MCAL_RCC_GetPCLK2Freq();
 80006b4:	f7ff ff8c 	bl	80005d0 <MCAL_RCC_GetPCLK2Freq>
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	e00a      	b.n	80006d2 <MCAL_UART_Init+0xda>
	else if(USARTx == USART2 || USARTx == USART3)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a34      	ldr	r2, [pc, #208]	; (8000790 <MCAL_UART_Init+0x198>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d003      	beq.n	80006cc <MCAL_UART_Init+0xd4>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <MCAL_UART_Init+0x19c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d102      	bne.n	80006d2 <MCAL_UART_Init+0xda>
		Pclk = MCAL_RCC_GetPCLK1Freq();
 80006cc:	f7ff ff6c 	bl	80005a8 <MCAL_RCC_GetPCLK1Freq>
 80006d0:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(Pclk, UART_Config->UART_BaudRate);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	0119      	lsls	r1, r3, #4
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	009a      	lsls	r2, r3, #2
 80006ea:	441a      	add	r2, r3
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	fb00 f303 	mul.w	r3, r0, r3
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <MCAL_UART_Init+0x1a0>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	430b      	orrs	r3, r1
 800071a:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	609a      	str	r2, [r3, #8]

	//Configuration of UART if it is enabled
	if(UART_Config->UART_IRQ_Enable != UART_IRQ_Enable_NONE)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	7a5b      	ldrb	r3, [r3, #9]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d026      	beq.n	8000778 <MCAL_UART_Init+0x180>
	{
		USARTx->CR1 |= UART_Config->UART_IRQ_Enable;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	7a52      	ldrb	r2, [r2, #9]
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60da      	str	r2, [r3, #12]


		//Enable NVIC for UARTx IRQ
		if(USARTx == USART1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MCAL_UART_Init+0x18c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d106      	bne.n	800074e <MCAL_UART_Init+0x156>
		{
			NVIC_USART1_IRQ37_ENABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MCAL_UART_Init+0x1a4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <MCAL_UART_Init+0x1a4>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6013      	str	r3, [r2, #0]
		{
			NVIC_USART3_IRQ39_ENABLE;
		}

	}
}
 800074c:	e014      	b.n	8000778 <MCAL_UART_Init+0x180>
		else if(USARTx == USART2)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <MCAL_UART_Init+0x198>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <MCAL_UART_Init+0x16c>
			NVIC_USART2_IRQ38_ENABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MCAL_UART_Init+0x1a4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <MCAL_UART_Init+0x1a4>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	e009      	b.n	8000778 <MCAL_UART_Init+0x180>
		else if(USARTx == USART3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <MCAL_UART_Init+0x19c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d105      	bne.n	8000778 <MCAL_UART_Init+0x180>
			NVIC_USART3_IRQ39_ENABLE;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MCAL_UART_Init+0x1a4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <MCAL_UART_Init+0x1a4>)
 8000772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000001c 	.word	0x2000001c
 8000784:	40013800 	.word	0x40013800
 8000788:	40021000 	.word	0x40021000
 800078c:	20000020 	.word	0x20000020
 8000790:	40004400 	.word	0x40004400
 8000794:	40004800 	.word	0x40004800
 8000798:	51eb851f 	.word	0x51eb851f
 800079c:	e000e104 	.word	0xe000e104

080007a0 <MCAL_UART_SendData>:
 * @param [in] 	-PollingEn: enable polling or disable it
 * @retval 		-none
 * Note			-we implement Asynchronous mode
================================================================**/
void MCAL_UART_SendData(USART_TypeDef *USARTx, uint16_t *pTxBuffer, enum Polling_Mechnism PollingEn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	71fb      	strb	r3, [r7, #7]

	//Wait until TXE is set (Transmit is empty)
	if(PollingEn == enable)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d107      	bne.n	80007c4 <MCAL_UART_SendData+0x24>
		while(!((USARTx->SR >> 7) & 1));
 80007b4:	bf00      	nop
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	09db      	lsrs	r3, r3, #7
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0f8      	beq.n	80007b6 <MCAL_UART_SendData+0x16>
	//check the length of data 8B or 9B
	if(Gl_UART_CFG->UART_Payload_length == UART_Payload_length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}
	else if(Gl_UART_CFG->UART_Payload_length == UART_Payload_length_8B)
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MCAL_UART_SendData+0x44>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d104      	bne.n	80007d8 <MCAL_UART_SendData+0x38>
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	605a      	str	r2, [r3, #4]
	}

}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000001c 	.word	0x2000001c

080007e8 <MCAL_UART_ReceiveData>:
 * @param [in] 	-PollingEn: enable polling or disable it
 * @retval 		-none
 * Note			-we implement Asynchronous mode
================================================================**/
void MCAL_UART_ReceiveData(USART_TypeDef *USARTx, uint16_t *pRxBuffer, enum Polling_Mechnism PollingEn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	4613      	mov	r3, r2
 80007f4:	71fb      	strb	r3, [r7, #7]
	//Wait until RXNE is set (Receive is not empty)
	if(PollingEn == enable)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d107      	bne.n	800080c <MCAL_UART_ReceiveData+0x24>
		while(!((USARTx->SR >> 5) & 1));
 80007fc:	bf00      	nop
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f8      	beq.n	80007fe <MCAL_UART_ReceiveData+0x16>
		{
			//parity enabled --> Data is 8B & Parity is 1B
			*((uint16_t *)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}
	else if(Gl_UART_CFG->UART_Payload_length == UART_Payload_length_8B)
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MCAL_UART_ReceiveData+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d114      	bne.n	8000840 <MCAL_UART_ReceiveData+0x58>
	{
		if(Gl_UART_CFG->UART_Parity == UART_Parity_NONE)
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MCAL_UART_ReceiveData+0x64>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d107      	bne.n	8000830 <MCAL_UART_ReceiveData+0x48>
		{
			//No parity --> Data is 8B & Parity is 0B
			*((uint16_t *)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	b29b      	uxth	r3, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	801a      	strh	r2, [r3, #0]
		{
			//parity enabled --> Data is 7B & Parity is 1B
			*((uint16_t *)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 800082e:	e007      	b.n	8000840 <MCAL_UART_ReceiveData+0x58>
			*((uint16_t *)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	b29b      	uxth	r3, r3
 8000836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800083a:	b29a      	uxth	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	801a      	strh	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2000001c 	.word	0x2000001c

08000850 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 	-USARTx: it is an instance from USART (x --> 1..3)
 * @retval 		-none
 * Note			-we should enable the corresponding ALT & GPIO in RCC clock also called after MCAL_UART_Init()
================================================================**/
void MCAL_UART_GPIO_Set_Pins(USART_TypeDef *USARTx)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	 * Rx  -->  Input floating
	 * CTS -->  Input floating
	 * RTS -->  Alternate function push-pull
	 */

	if(USARTx == USART1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d118      	bne.n	8000892 <MCAL_UART_GPIO_Set_Pins+0x42>
		 * CTS --> PA11
		 * RTS --> PA12
		 */

		//configuration of Tx at PA9
		PinCFG.GPIO_PinNumber = GPIO_PIN_9;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_PP;
 8000866:	2306      	movs	r3, #6
 8000868:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000876:	f7ff fdde 	bl	8000436 <MCAL_GPIO_Init>

		//configuration of Rx at PA10
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_INPUT_AF;
 8000880:	2308      	movs	r3, #8
 8000882:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4820      	ldr	r0, [pc, #128]	; (800090c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800088c:	f7ff fdd3 	bl	8000436 <MCAL_GPIO_Init>
			PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCFG);
		}
	}
}
 8000890:	e036      	b.n	8000900 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d116      	bne.n	80008c8 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCFG.GPIO_PinNumber = GPIO_PIN_2;
 800089a:	2304      	movs	r3, #4
 800089c:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_PP;
 800089e:	2306      	movs	r3, #6
 80008a0:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4817      	ldr	r0, [pc, #92]	; (800090c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008ae:	f7ff fdc2 	bl	8000436 <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_3;
 80008b2:	2308      	movs	r3, #8
 80008b4:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_INPUT_AF;
 80008b6:	2308      	movs	r3, #8
 80008b8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008c2:	f7ff fdb8 	bl	8000436 <MCAL_GPIO_Init>
}
 80008c6:	e01b      	b.n	8000900 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d117      	bne.n	8000900 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_OUTPUT_AF_PP;
 80008d6:	2306      	movs	r3, #6
 80008d8:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_PinSPEED = GPIO_SPEED_10MHz;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008e6:	f7ff fda6 	bl	8000436 <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
 80008ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ee:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_PinMODE = GPIO_MODE_INPUT_AF;
 80008f0:	2308      	movs	r3, #8
 80008f2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008fc:	f7ff fd9b 	bl	8000436 <MCAL_GPIO_Init>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40010800 	.word	0x40010800
 8000910:	40004400 	.word	0x40004400
 8000914:	40004800 	.word	0x40004800
 8000918:	40010c00 	.word	0x40010c00

0800091c <USART1_IRQHandler>:


//ISR for USARTx
void USART1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	Gl_AUARTx_CFG[0]->UART_PF_IRQ_CallBack();
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <USART1_IRQHandler+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4798      	blx	r3
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000020 	.word	0x20000020

08000930 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	Gl_AUARTx_CFG[1]->UART_PF_IRQ_CallBack();
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <USART2_IRQHandler+0x10>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4798      	blx	r3
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000020 	.word	0x20000020

08000944 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	Gl_AUARTx_CFG[2]->UART_PF_IRQ_CallBack();
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <USART3_IRQHandler+0x10>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	4798      	blx	r3
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000020 	.word	0x20000020

08000958 <main>:


uint8_t ch;

int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
	Clock_Init();
 800095e:	f000 f831 	bl	80009c4 <Clock_Init>
	//	MCAL_UART_Init(USART1, &UART_CFG);
	//	MCAL_UART_GPIO_Set_Pins(USART1);


	UART_Configuration_t UART_CFG;
	UART_CFG.UART_MODE = UART_MODE_Tx_Rx;
 8000962:	230c      	movs	r3, #12
 8000964:	703b      	strb	r3, [r7, #0]
	UART_CFG.UART_Payload_length = UART_Payload_length_8B;
 8000966:	2300      	movs	r3, #0
 8000968:	707b      	strb	r3, [r7, #1]
	UART_CFG.UART_Num_Stop_Bits = UART_Num_Stop_Bits_one_bit;
 800096a:	2300      	movs	r3, #0
 800096c:	70bb      	strb	r3, [r7, #2]
	UART_CFG.UART_Parity = UART_Parity_NONE;
 800096e:	2300      	movs	r3, #0
 8000970:	70fb      	strb	r3, [r7, #3]
	UART_CFG.UART_BaudRate = UART_BaudRate_115200;
 8000972:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000976:	607b      	str	r3, [r7, #4]
	UART_CFG.UART_HW_FLOW_CTL = UART_HW_FLOW_CTL_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	723b      	strb	r3, [r7, #8]
	UART_CFG.UART_IRQ_Enable = UART_IRQ_Enable_RXNE;
 800097c:	2320      	movs	r3, #32
 800097e:	727b      	strb	r3, [r7, #9]
	UART_CFG.UART_PF_IRQ_CallBack = UART_IRQ_CallBack;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <main+0x40>)
 8000982:	60fb      	str	r3, [r7, #12]

	MCAL_UART_Init(USART1, &UART_CFG);
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <main+0x44>)
 800098a:	f7ff fe35 	bl	80005f8 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <main+0x44>)
 8000990:	f7ff ff5e 	bl	8000850 <MCAL_UART_GPIO_Set_Pins>


	/* Loop forever */
	while(1)
 8000994:	e7fe      	b.n	8000994 <main+0x3c>
 8000996:	bf00      	nop
 8000998:	080009a1 	.word	0x080009a1
 800099c:	40013800 	.word	0x40013800

080009a0 <UART_IRQ_CallBack>:
		//		}
	}
}

void UART_IRQ_CallBack(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 80009a4:	2201      	movs	r2, #1
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <UART_IRQ_CallBack+0x1c>)
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <UART_IRQ_CallBack+0x20>)
 80009aa:	f7ff ff1d 	bl	80007e8 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80009ae:	2200      	movs	r2, #0
 80009b0:	4902      	ldr	r1, [pc, #8]	; (80009bc <UART_IRQ_CallBack+0x1c>)
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <UART_IRQ_CallBack+0x20>)
 80009b4:	f7ff fef4 	bl	80007a0 <MCAL_UART_SendData>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000068 	.word	0x20000068
 80009c0:	40013800 	.word	0x40013800

080009c4 <Clock_Init>:
//	//MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
//	LCD_WRITE_STRING("Interrupt is happened");
//}

void Clock_Init()
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	//open clock of AFIO
	RCC_AFIO_CLK_EN();
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <Clock_Init+0x30>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <Clock_Init+0x30>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6193      	str	r3, [r2, #24]

	//open clock of GPIOA
	RCC_GPIOA_CLK_EN();
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <Clock_Init+0x30>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <Clock_Init+0x30>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]

	//open clock of GPIOB
	RCC_GPIOB_CLK_EN();
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <Clock_Init+0x30>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <Clock_Init+0x30>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6193      	str	r3, [r2, #24]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a26:	f000 f811 	bl	8000a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff ff95 	bl	8000958 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a3c:	08000acc 	.word	0x08000acc
  ldr r2, =_sbss
 8000a40:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a44:	2000006c 	.word	0x2000006c

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <__libc_init_array>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	2500      	movs	r5, #0
 8000a50:	4e0c      	ldr	r6, [pc, #48]	; (8000a84 <__libc_init_array+0x38>)
 8000a52:	4c0d      	ldr	r4, [pc, #52]	; (8000a88 <__libc_init_array+0x3c>)
 8000a54:	1ba4      	subs	r4, r4, r6
 8000a56:	10a4      	asrs	r4, r4, #2
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	d109      	bne.n	8000a70 <__libc_init_array+0x24>
 8000a5c:	f000 f81a 	bl	8000a94 <_init>
 8000a60:	2500      	movs	r5, #0
 8000a62:	4e0a      	ldr	r6, [pc, #40]	; (8000a8c <__libc_init_array+0x40>)
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <__libc_init_array+0x44>)
 8000a66:	1ba4      	subs	r4, r4, r6
 8000a68:	10a4      	asrs	r4, r4, #2
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d105      	bne.n	8000a7a <__libc_init_array+0x2e>
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a74:	4798      	blx	r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e7ee      	b.n	8000a58 <__libc_init_array+0xc>
 8000a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a7e:	4798      	blx	r3
 8000a80:	3501      	adds	r5, #1
 8000a82:	e7f2      	b.n	8000a6a <__libc_init_array+0x1e>
 8000a84:	08000ac4 	.word	0x08000ac4
 8000a88:	08000ac4 	.word	0x08000ac4
 8000a8c:	08000ac4 	.word	0x08000ac4
 8000a90:	08000ac8 	.word	0x08000ac8

08000a94 <_init>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	bf00      	nop
 8000a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9a:	bc08      	pop	{r3}
 8000a9c:	469e      	mov	lr, r3
 8000a9e:	4770      	bx	lr

08000aa0 <_fini>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	bf00      	nop
 8000aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa6:	bc08      	pop	{r3}
 8000aa8:	469e      	mov	lr, r3
 8000aaa:	4770      	bx	lr
