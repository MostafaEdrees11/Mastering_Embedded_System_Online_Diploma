
Task1_ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000126  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061c  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "Utils.h"
#include "DIO_Interface.h"


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	28 97       	sbiw	r28, 0x08	; 8
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	unsigned int Targets[] = {PIN5, PIN6, PIN7, PIN4};
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>

	/* Set PIN4, PIN5, PIN6, and PIN7 as outputs by setting their corresponding bits in DDRD */
	SET_BIT(DDRD, PIN4);
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD, PIN5);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD, PIN6);
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD, PIN7);
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	81 bb       	out	0x11, r24	; 17
	unsigned int flag;

	/* Main program loop */
	while (1)
	{
		for (flag = 0; flag < 4; flag++)
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	2a c0       	rjmp	.+84     	; 0x11a <main+0x98>
		{
			/* Set the corresponding pin in PORTD to HIGH to turn on an LED */
			SET_BIT(PORTD, Targets[flag]);
  c6:	62 b3       	in	r22, 0x12	; 18
  c8:	f9 01       	movw	r30, r18
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	4c 0f       	add	r20, r28
  d4:	5d 1f       	adc	r21, r29
  d6:	e4 0f       	add	r30, r20
  d8:	f5 1f       	adc	r31, r21
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ac 01       	movw	r20, r24
  e0:	00 80       	ld	r0, Z
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x66>
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x62>
  ec:	46 2b       	or	r20, r22
  ee:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	5f ef       	ldi	r21, 0xFF	; 255
  f2:	69 e6       	ldi	r22, 0x69	; 105
  f4:	48 e1       	ldi	r20, 0x18	; 24
  f6:	51 50       	subi	r21, 0x01	; 1
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x74>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x7e>
 100:	00 00       	nop
			
			/* Delay for 1000 milliseconds (1 second) */
			_delay_ms(1000);
			
			/* Clear the corresponding pin in PORTD to LOW to turn off the LED */
			CLEAR_BIT(PORTD, Targets[flag]);
 102:	42 b3       	in	r20, 0x12	; 18
 104:	00 80       	ld	r0, Z
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x8a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x86>
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	82 bb       	out	0x12, r24	; 18
	unsigned int flag;

	/* Main program loop */
	while (1)
	{
		for (flag = 0; flag < 4; flag++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	24 30       	cpi	r18, 0x04	; 4
 11c:	31 05       	cpc	r19, r1
 11e:	98 f2       	brcs	.-90     	; 0xc6 <main+0x44>
 120:	cf cf       	rjmp	.-98     	; 0xc0 <main+0x3e>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
