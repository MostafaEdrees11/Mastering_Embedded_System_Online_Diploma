
Three Leds with Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059a  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051e  00000000  00000000  000007e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bd  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "Utils.h"
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	/* Clear the first pin (PIN0) of the Data Direction Register D (DDRD) to configure it as an input pin. */
	CLEAR_BIT(DDRD, PIN0);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	81 bb       	out	0x11, r24	; 17

	/* Clear the first pin (PIN0) of the Port D (PORTD) to disable any pull-up resistor on this pin. */
	CLEAR_BIT(PORTD, PIN0);
  96:	82 b3       	in	r24, 0x12	; 18
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	82 bb       	out	0x12, r24	; 18

	/* Set the fifth (PIN5), sixth (PIN6), and seventh (PIN7) pins of the Data Direction Register D (DDRD) to configure them as output pins. */
	SET_BIT(DDRD, PIN5);
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD, PIN6);
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD, PIN7);
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	81 bb       	out	0x11, r24	; 17

	/* Declare integer variables for loop control and an array to store LED pins. */
	int i;
	int LEDs[] = {PIN5, PIN6, PIN7};
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x36>

	/* Enter the main application loop. */
	while (1)
	{
		/* Initialize the loop control variable 'i' to 0. */
		i = 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0

		/* Start a loop to handle LED control based on button presses. */
		while(i < 3)
  c4:	1b c0       	rjmp	.+54     	; 0xfc <main+0x7a>
		{
			/* Check if the first pin (PIN0) of Port D (PIND) is high (button press detected). */
			if(READ_BIT(PIND, PIN0) == 1)
  c6:	80 9b       	sbis	0x10, 0	; 16
  c8:	19 c0       	rjmp	.+50     	; 0xfc <main+0x7a>
			{
				/* Set the corresponding LED pin and increment 'i'. */
				SET_BIT(PORTD, LEDs[i++]);
  ca:	9c 01       	movw	r18, r24
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e8 0f       	add	r30, r24
  de:	f9 1f       	adc	r31, r25
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	00 80       	ld	r0, Z
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x6a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x66>
  f0:	92 b3       	in	r25, 0x12	; 18
  f2:	89 2b       	or	r24, r25
  f4:	82 bb       	out	0x12, r24	; 18

				/* Wait until the button is released (single press). */
				while(READ_BIT(PIND, PIN0) == 1);
  f6:	80 99       	sbic	0x10, 0	; 16
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x74>
		{
			/* Check if the first pin (PIN0) of Port D (PIND) is high (button press detected). */
			if(READ_BIT(PIND, PIN0) == 1)
			{
				/* Set the corresponding LED pin and increment 'i'. */
				SET_BIT(PORTD, LEDs[i++]);
  fa:	c9 01       	movw	r24, r18
	{
		/* Initialize the loop control variable 'i' to 0. */
		i = 0;

		/* Start a loop to handle LED control based on button presses. */
		while(i < 3)
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	91 05       	cpc	r25, r1
 100:	14 f3       	brlt	.-60     	; 0xc6 <main+0x44>
 102:	1b c0       	rjmp	.+54     	; 0x13a <main+0xb8>

		/* Start a loop to handle LED control based on button releases. */
		while(i > 0)
		{
			/* Check if the first pin (PIN0) of Port D (PIND) is high (button release detected). */
			if(READ_BIT(PIND, PIN0) == 1)
 104:	80 9b       	sbis	0x10, 0	; 16
 106:	19 c0       	rjmp	.+50     	; 0x13a <main+0xb8>
			{
				/* Clear the corresponding LED pin and decrement 'i'. */
				CLEAR_BIT(PORTD, LEDs[--i]);
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	fc 01       	movw	r30, r24
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	2c 0f       	add	r18, r28
 116:	3d 1f       	adc	r19, r29
 118:	e2 0f       	add	r30, r18
 11a:	f3 1f       	adc	r31, r19
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	00 80       	ld	r0, Z
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0xa6>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0xa2>
 12c:	20 95       	com	r18
 12e:	30 95       	com	r19
 130:	32 b3       	in	r19, 0x12	; 18
 132:	23 23       	and	r18, r19
 134:	22 bb       	out	0x12, r18	; 18

				/* Wait until the button is released. */
				while(READ_BIT(PIND, PIN0) == 1);
 136:	80 99       	sbic	0x10, 0	; 16
 138:	fe cf       	rjmp	.-4      	; 0x136 <main+0xb4>
				while(READ_BIT(PIND, PIN0) == 1);
			}
		}

		/* Start a loop to handle LED control based on button releases. */
		while(i > 0)
 13a:	18 16       	cp	r1, r24
 13c:	19 06       	cpc	r1, r25
 13e:	14 f3       	brlt	.-60     	; 0x104 <main+0x82>
 140:	bf cf       	rjmp	.-130    	; 0xc0 <main+0x3e>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
