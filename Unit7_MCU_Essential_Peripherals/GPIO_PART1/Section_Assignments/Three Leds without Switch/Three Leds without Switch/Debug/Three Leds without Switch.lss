
Three Leds without Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000655  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "Utils.h"
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,PIN4);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	80 61       	ori	r24, 0x10	; 16
  94:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PIN5);
  96:	81 b3       	in	r24, 0x11	; 17
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PIN6);
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PIN7);
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	81 bb       	out	0x11, r24	; 17
	
	int flag;
	unsigned int LEDs[] = {PIN5, PIN6, PIN7};
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	e0 e6       	ldi	r30, 0x60	; 96
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
	
    /* Replace with your application code */
    while (1) 
    {
		for(flag = 0; flag < 3; flag++)
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	1f c0       	rjmp	.+62     	; 0xfe <main+0x7c>
		{
			SET_BIT(PORTD,LEDs[flag]);
  c0:	42 b3       	in	r20, 0x12	; 18
  c2:	f9 01       	movw	r30, r18
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	8c 0f       	add	r24, r28
  ce:	9d 1f       	adc	r25, r29
  d0:	e8 0f       	add	r30, r24
  d2:	f9 1f       	adc	r31, r25
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	00 80       	ld	r0, Z
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x5e>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x5a>
  e4:	84 2b       	or	r24, r20
  e6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	49 e6       	ldi	r20, 0x69	; 105
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	91 50       	subi	r25, 0x01	; 1
  f0:	40 40       	sbci	r20, 0x00	; 0
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x76>
  f8:	00 00       	nop
	unsigned int LEDs[] = {PIN5, PIN6, PIN7};
	
    /* Replace with your application code */
    while (1) 
    {
		for(flag = 0; flag < 3; flag++)
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	23 30       	cpi	r18, 0x03	; 3
 100:	31 05       	cpc	r19, r1
 102:	f4 f2       	brlt	.-68     	; 0xc0 <main+0x3e>
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	20 c0       	rjmp	.+64     	; 0x14a <main+0xc8>
			SET_BIT(PORTD,LEDs[flag]);
			_delay_ms(1000);
		}
		for(flag = 2; flag >= 0; flag--)
		{
			CLEAR_BIT(PORTD,LEDs[flag]);
 10a:	42 b3       	in	r20, 0x12	; 18
 10c:	f9 01       	movw	r30, r18
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	8c 0f       	add	r24, r28
 118:	9d 1f       	adc	r25, r29
 11a:	e8 0f       	add	r30, r24
 11c:	f9 1f       	adc	r31, r25
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	00 80       	ld	r0, Z
 124:	02 c0       	rjmp	.+4      	; 0x12a <main+0xa8>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <main+0xa4>
 12e:	80 95       	com	r24
 130:	84 23       	and	r24, r20
 132:	82 bb       	out	0x12, r24	; 18
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	49 e6       	ldi	r20, 0x69	; 105
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	40 40       	sbci	r20, 0x00	; 0
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xb8>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xc2>
 144:	00 00       	nop
		for(flag = 0; flag < 3; flag++)
		{
			SET_BIT(PORTD,LEDs[flag]);
			_delay_ms(1000);
		}
		for(flag = 2; flag >= 0; flag--)
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
 14a:	33 23       	and	r19, r19
 14c:	f4 f6       	brge	.-68     	; 0x10a <main+0x88>
 14e:	b5 cf       	rjmp	.-150    	; 0xba <main+0x38>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
