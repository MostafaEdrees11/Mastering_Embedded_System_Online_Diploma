
LCD_Keypad_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c10  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000737  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000707  00000000  00000000  00001927  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042c  00000000  00000000  000025e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  8a:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_INIT>:
s32 KEYPAD_COLUMNs[4] = {C0, C1, C2, C3};

void KEYPAD_INIT(void)
{
	/* make rows as input */
	CLR_BIT(DATADIR_KEYPAD,R0);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DATADIR_KEYPAD,R1);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DATADIR_KEYPAD,R2);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DATADIR_KEYPAD,R3);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	81 bb       	out	0x11, r24	; 17
	/* make columns as output */
	SET_BIT(DATADIR_KEYPAD,C0);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DATADIR_KEYPAD,C1);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DATADIR_KEYPAD,C2);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DATADIR_KEYPAD,C3);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	81 bb       	out	0x11, r24	; 17
	
	KEYPAD_PORT = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	08 95       	ret

000000c8 <KEYPAD_GETCHAR>:

s8 KEYPAD_GETCHAR(void)
{
	s8 i,j;
	
	for(i = 0; i < 4; i++)
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	98 c0       	rjmp	.+304    	; 0x1fc <KEYPAD_GETCHAR+0x134>
	{
		SET_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[0]);
  cc:	42 b3       	in	r20, 0x12	; 18
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	9c 01       	movw	r18, r24
  d8:	00 80       	ld	r0, Z
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KEYPAD_GETCHAR+0x18>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KEYPAD_GETCHAR+0x14>
  e4:	24 2b       	or	r18, r20
  e6:	22 bb       	out	0x12, r18	; 18
		SET_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[1]);
  e8:	42 b3       	in	r20, 0x12	; 18
  ea:	9c 01       	movw	r18, r24
  ec:	04 80       	ldd	r0, Z+4	; 0x04
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <KEYPAD_GETCHAR+0x2c>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <KEYPAD_GETCHAR+0x28>
  f8:	24 2b       	or	r18, r20
  fa:	22 bb       	out	0x12, r18	; 18
		SET_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[2]);
  fc:	42 b3       	in	r20, 0x12	; 18
  fe:	9c 01       	movw	r18, r24
 100:	00 84       	ldd	r0, Z+8	; 0x08
 102:	02 c0       	rjmp	.+4      	; 0x108 <KEYPAD_GETCHAR+0x40>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <KEYPAD_GETCHAR+0x3c>
 10c:	24 2b       	or	r18, r20
 10e:	22 bb       	out	0x12, r18	; 18
		SET_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[3]);
 110:	42 b3       	in	r20, 0x12	; 18
 112:	9c 01       	movw	r18, r24
 114:	04 84       	ldd	r0, Z+12	; 0x0c
 116:	02 c0       	rjmp	.+4      	; 0x11c <KEYPAD_GETCHAR+0x54>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <KEYPAD_GETCHAR+0x50>
 120:	24 2b       	or	r18, r20
 122:	22 bb       	out	0x12, r18	; 18
		
		CLR_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[i]);
 124:	22 b3       	in	r18, 0x12	; 18
 126:	34 e0       	ldi	r19, 0x04	; 4
 128:	73 02       	muls	r23, r19
 12a:	f0 01       	movw	r30, r0
 12c:	11 24       	eor	r1, r1
 12e:	e0 5a       	subi	r30, 0xA0	; 160
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	00 80       	ld	r0, Z
 134:	02 c0       	rjmp	.+4      	; 0x13a <KEYPAD_GETCHAR+0x72>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <KEYPAD_GETCHAR+0x6e>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	82 bb       	out	0x12, r24	; 18
		
		for(j = 0; j < 4; j++)
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	56 c0       	rjmp	.+172    	; 0x1f4 <KEYPAD_GETCHAR+0x12c>
		{
			if(!GET_BIT(KEYPAD_PIN,KEYPAD_ROWs[j]))
 148:	80 b3       	in	r24, 0x10	; 16
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	59 02       	muls	r21, r25
 14e:	f0 01       	movw	r30, r0
 150:	11 24       	eor	r1, r1
 152:	e0 59       	subi	r30, 0x90	; 144
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	60 81       	ld	r22, Z
 158:	46 2f       	mov	r20, r22
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	06 2e       	mov	r0, r22
 160:	02 c0       	rjmp	.+4      	; 0x166 <KEYPAD_GETCHAR+0x9e>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <KEYPAD_GETCHAR+0x9a>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	82 23       	and	r24, r18
 16e:	93 23       	and	r25, r19
 170:	02 c0       	rjmp	.+4      	; 0x176 <KEYPAD_GETCHAR+0xae>
 172:	95 95       	asr	r25
 174:	87 95       	ror	r24
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <KEYPAD_GETCHAR+0xaa>
 17a:	89 2b       	or	r24, r25
 17c:	d1 f5       	brne	.+116    	; 0x1f2 <KEYPAD_GETCHAR+0x12a>
			{
				while(!GET_BIT(KEYPAD_PIN,KEYPAD_ROWs[j]));
 17e:	80 b3       	in	r24, 0x10	; 16
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	82 23       	and	r24, r18
 184:	93 23       	and	r25, r19
 186:	04 2e       	mov	r0, r20
 188:	02 c0       	rjmp	.+4      	; 0x18e <KEYPAD_GETCHAR+0xc6>
 18a:	95 95       	asr	r25
 18c:	87 95       	ror	r24
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <KEYPAD_GETCHAR+0xc2>
 192:	89 2b       	or	r24, r25
 194:	a1 f3       	breq	.-24     	; 0x17e <KEYPAD_GETCHAR+0xb6>
				
				switch(i)
 196:	71 30       	cpi	r23, 0x01	; 1
 198:	91 f0       	breq	.+36     	; 0x1be <KEYPAD_GETCHAR+0xf6>
 19a:	1c f4       	brge	.+6      	; 0x1a2 <KEYPAD_GETCHAR+0xda>
 19c:	77 23       	and	r23, r23
 19e:	31 f0       	breq	.+12     	; 0x1ac <KEYPAD_GETCHAR+0xe4>
 1a0:	28 c0       	rjmp	.+80     	; 0x1f2 <KEYPAD_GETCHAR+0x12a>
 1a2:	72 30       	cpi	r23, 0x02	; 2
 1a4:	a9 f0       	breq	.+42     	; 0x1d0 <KEYPAD_GETCHAR+0x108>
 1a6:	73 30       	cpi	r23, 0x03	; 3
 1a8:	e1 f0       	breq	.+56     	; 0x1e2 <KEYPAD_GETCHAR+0x11a>
 1aa:	23 c0       	rjmp	.+70     	; 0x1f2 <KEYPAD_GETCHAR+0x12a>
				{
					case 0:
					if(j == 0) return '7';
 1ac:	55 23       	and	r21, r21
 1ae:	59 f1       	breq	.+86     	; 0x206 <KEYPAD_GETCHAR+0x13e>
					else if(j == 1) return '4';
 1b0:	51 30       	cpi	r21, 0x01	; 1
 1b2:	59 f1       	breq	.+86     	; 0x20a <KEYPAD_GETCHAR+0x142>
					else if(j == 2) return '1';
 1b4:	52 30       	cpi	r21, 0x02	; 2
 1b6:	59 f1       	breq	.+86     	; 0x20e <KEYPAD_GETCHAR+0x146>
					else if(j == 3) return '!';
 1b8:	53 30       	cpi	r21, 0x03	; 3
 1ba:	d9 f4       	brne	.+54     	; 0x1f2 <KEYPAD_GETCHAR+0x12a>
 1bc:	2a c0       	rjmp	.+84     	; 0x212 <KEYPAD_GETCHAR+0x14a>
					break;
					
					case 1:
					if(j == 0) return '8';
 1be:	55 23       	and	r21, r21
 1c0:	51 f1       	breq	.+84     	; 0x216 <KEYPAD_GETCHAR+0x14e>
					else if(j == 1) return '5';
 1c2:	51 30       	cpi	r21, 0x01	; 1
 1c4:	51 f1       	breq	.+84     	; 0x21a <KEYPAD_GETCHAR+0x152>
					else if(j == 2) return '2';
 1c6:	52 30       	cpi	r21, 0x02	; 2
 1c8:	51 f1       	breq	.+84     	; 0x21e <KEYPAD_GETCHAR+0x156>
					else if(j == 3) return '0';
 1ca:	53 30       	cpi	r21, 0x03	; 3
 1cc:	91 f4       	brne	.+36     	; 0x1f2 <KEYPAD_GETCHAR+0x12a>
 1ce:	29 c0       	rjmp	.+82     	; 0x222 <KEYPAD_GETCHAR+0x15a>
					break;
					
					case 2:
					if(j == 0) return '9';
 1d0:	55 23       	and	r21, r21
 1d2:	49 f1       	breq	.+82     	; 0x226 <KEYPAD_GETCHAR+0x15e>
					else if(j == 1) return '6';
 1d4:	51 30       	cpi	r21, 0x01	; 1
 1d6:	49 f1       	breq	.+82     	; 0x22a <KEYPAD_GETCHAR+0x162>
					else if(j == 2) return '3';
 1d8:	52 30       	cpi	r21, 0x02	; 2
 1da:	49 f1       	breq	.+82     	; 0x22e <KEYPAD_GETCHAR+0x166>
					else if(j == 3) return '=';
 1dc:	53 30       	cpi	r21, 0x03	; 3
 1de:	49 f4       	brne	.+18     	; 0x1f2 <KEYPAD_GETCHAR+0x12a>
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <KEYPAD_GETCHAR+0x16a>
					break;
					
					case 3:
					if(j == 0) return '/';
 1e2:	55 23       	and	r21, r21
 1e4:	41 f1       	breq	.+80     	; 0x236 <KEYPAD_GETCHAR+0x16e>
					else if(j == 1) return '*';
 1e6:	51 30       	cpi	r21, 0x01	; 1
 1e8:	41 f1       	breq	.+80     	; 0x23a <KEYPAD_GETCHAR+0x172>
					else if(j == 2) return '-';
 1ea:	52 30       	cpi	r21, 0x02	; 2
 1ec:	41 f1       	breq	.+80     	; 0x23e <KEYPAD_GETCHAR+0x176>
					else if(j == 3) return '+';
 1ee:	53 30       	cpi	r21, 0x03	; 3
 1f0:	41 f1       	breq	.+80     	; 0x242 <KEYPAD_GETCHAR+0x17a>
		SET_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[2]);
		SET_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[3]);
		
		CLR_BIT(KEYPAD_PORT,KEYPAD_COLUMNs[i]);
		
		for(j = 0; j < 4; j++)
 1f2:	5f 5f       	subi	r21, 0xFF	; 255
 1f4:	54 30       	cpi	r21, 0x04	; 4
 1f6:	0c f4       	brge	.+2      	; 0x1fa <KEYPAD_GETCHAR+0x132>
 1f8:	a7 cf       	rjmp	.-178    	; 0x148 <KEYPAD_GETCHAR+0x80>

s8 KEYPAD_GETCHAR(void)
{
	s8 i,j;
	
	for(i = 0; i < 4; i++)
 1fa:	7f 5f       	subi	r23, 0xFF	; 255
 1fc:	74 30       	cpi	r23, 0x04	; 4
 1fe:	0c f4       	brge	.+2      	; 0x202 <KEYPAD_GETCHAR+0x13a>
 200:	65 cf       	rjmp	.-310    	; 0xcc <KEYPAD_GETCHAR+0x4>
					break; 
				}
			}
		}
	}
	return 'N';
 202:	8e e4       	ldi	r24, 0x4E	; 78
 204:	08 95       	ret
				while(!GET_BIT(KEYPAD_PIN,KEYPAD_ROWs[j]));
				
				switch(i)
				{
					case 0:
					if(j == 0) return '7';
 206:	87 e3       	ldi	r24, 0x37	; 55
 208:	08 95       	ret
					else if(j == 1) return '4';
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	08 95       	ret
					else if(j == 2) return '1';
 20e:	81 e3       	ldi	r24, 0x31	; 49
 210:	08 95       	ret
					else if(j == 3) return '!';
 212:	81 e2       	ldi	r24, 0x21	; 33
 214:	08 95       	ret
					break;
					
					case 1:
					if(j == 0) return '8';
 216:	88 e3       	ldi	r24, 0x38	; 56
 218:	08 95       	ret
					else if(j == 1) return '5';
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	08 95       	ret
					else if(j == 2) return '2';
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	08 95       	ret
					else if(j == 3) return '0';
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	08 95       	ret
					break;
					
					case 2:
					if(j == 0) return '9';
 226:	89 e3       	ldi	r24, 0x39	; 57
 228:	08 95       	ret
					else if(j == 1) return '6';
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	08 95       	ret
					else if(j == 2) return '3';
 22e:	83 e3       	ldi	r24, 0x33	; 51
 230:	08 95       	ret
					else if(j == 3) return '=';
 232:	8d e3       	ldi	r24, 0x3D	; 61
 234:	08 95       	ret
					break;
					
					case 3:
					if(j == 0) return '/';
 236:	8f e2       	ldi	r24, 0x2F	; 47
 238:	08 95       	ret
					else if(j == 1) return '*';
 23a:	8a e2       	ldi	r24, 0x2A	; 42
 23c:	08 95       	ret
					else if(j == 2) return '-';
 23e:	8d e2       	ldi	r24, 0x2D	; 45
 240:	08 95       	ret
					else if(j == 3) return '+';
 242:	8b e2       	ldi	r24, 0x2B	; 43
				}
			}
		}
	}
	return 'N';
 244:	08 95       	ret

00000246 <LCD_EN_LATCH>:

#include <util/delay.h>

void LCD_EN_LATCH(void)
{
	SET_BIT(LCD_CTRL,EN_SWITCH);
 246:	88 b3       	in	r24, 0x18	; 24
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	8f ec       	ldi	r24, 0xCF	; 207
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_EN_LATCH+0xa>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_EN_LATCH+0x10>
 256:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(LCD_CTRL,EN_SWITCH);
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	87 7f       	andi	r24, 0xF7	; 247
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	08 95       	ret

00000260 <LCD_IS_BUSY>:
	#ifdef EIGHT_BIT_MODE
	DATADIR_LCD_PORT = 0x00;		/* Data Direction as input */
	#endif
	
	#ifdef FOUR_BIT_MODE
	DATADIR_LCD_PORT &= ~(0xFF << DATA_SHIFT);		
 260:	8a b3       	in	r24, 0x1a	; 26
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	SET_BIT(LCD_CTRL,RW_SWITCH);	/* Read Mode	*/
 266:	88 b3       	in	r24, 0x18	; 24
 268:	84 60       	ori	r24, 0x04	; 4
 26a:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL,RS_SWITCH);	/* Command Register	*/
 26c:	88 b3       	in	r24, 0x18	; 24
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	88 bb       	out	0x18, r24	; 24
	
	DATADIR_LCD_PORT |= (0xFF << DATA_SHIFT);
 272:	8a b3       	in	r24, 0x1a	; 26
 274:	80 6f       	ori	r24, 0xF0	; 240
 276:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(LCD_CTRL,RW_SWITCH); 
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	08 95       	ret

00000280 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
}

void LCD_WRITE_COMMAND(u8 command)
{
 280:	cf 93       	push	r28
 282:	c8 2f       	mov	r28, r24
	LCD_IS_BUSY();
 284:	0e 94 30 01 	call	0x260	; 0x260 <LCD_IS_BUSY>
	_delay_ms(1);
	LCD_EN_LATCH();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0); 
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	9c 2f       	mov	r25, r28
 28e:	90 7f       	andi	r25, 0xF0	; 240
 290:	89 2b       	or	r24, r25
 292:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(LCD_CTRL,RS_SWITCH);		/* command register	*/
 294:	88 b3       	in	r24, 0x18	; 24
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL,RW_SWITCH);		/* write mode		*/
 29a:	88 b3       	in	r24, 0x18	; 24
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	8f ec       	ldi	r24, 0xCF	; 207
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_WRITE_COMMAND+0x24>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_WRITE_COMMAND+0x2a>
 2aa:	00 00       	nop
	_delay_ms(1);
	LCD_EN_LATCH();
 2ac:	0e 94 23 01 	call	0x246	; 0x246 <LCD_EN_LATCH>
	
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
 2b0:	2b b3       	in	r18, 0x1b	; 27
 2b2:	30 e1       	ldi	r19, 0x10	; 16
 2b4:	c3 9f       	mul	r28, r19
 2b6:	c0 01       	movw	r24, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	92 2f       	mov	r25, r18
 2bc:	9f 70       	andi	r25, 0x0F	; 15
 2be:	89 2b       	or	r24, r25
 2c0:	8b bb       	out	0x1b, r24	; 27
 2c2:	8f ec       	ldi	r24, 0xCF	; 207
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_WRITE_COMMAND+0x46>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_WRITE_COMMAND+0x4c>
 2cc:	00 00       	nop
	_delay_ms(1);
	LCD_EN_LATCH();
 2ce:	0e 94 23 01 	call	0x246	; 0x246 <LCD_EN_LATCH>
	#endif
}
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <LCD_GOTO_XY>:
	CLR_BIT(LCD_CTRL,EN_SWITCH);
}

void LCD_GOTO_XY(u8 line, u8 position)
{
	if(line == 1)
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	39 f4       	brne	.+14     	; 0x2e8 <LCD_GOTO_XY+0x12>
	{
		if(position >= 0 && position < 16)
 2da:	60 31       	cpi	r22, 0x10	; 16
 2dc:	68 f4       	brcc	.+26     	; 0x2f8 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 2de:	80 e8       	ldi	r24, 0x80	; 128
 2e0:	86 0f       	add	r24, r22
 2e2:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
 2e6:	08 95       	ret
		}
	}
	else if(line == 2)
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	31 f4       	brne	.+12     	; 0x2f8 <LCD_GOTO_XY+0x22>
	{
		if(position >= 0 && position < 32)
 2ec:	60 32       	cpi	r22, 0x20	; 32
 2ee:	20 f4       	brcc	.+8      	; 0x2f8 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 2f0:	80 ec       	ldi	r24, 0xC0	; 192
 2f2:	86 0f       	add	r24, r22
 2f4:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
 2f8:	08 95       	ret

000002fa <LCD_CLR_SCREEN>:
	CLR_BIT(LCD_CTRL,RW_SWITCH); 
}

void LCD_CLR_SCREEN(void)
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
 300:	08 95       	ret

00000302 <LCD_INIT>:
 302:	8f e3       	ldi	r24, 0x3F	; 63
 304:	9c e9       	ldi	r25, 0x9C	; 156
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_INIT+0x4>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_INIT+0xa>
 30c:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(20);
	
	LCD_IS_BUSY();
 30e:	0e 94 30 01 	call	0x260	; 0x260 <LCD_IS_BUSY>
	/*			set control pins as input pins		*/
	SET_BIT(DATADIR_LCD_CTRL,RS_SWITCH);
 312:	87 b3       	in	r24, 0x17	; 23
 314:	82 60       	ori	r24, 0x02	; 2
 316:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DATADIR_LCD_CTRL,RW_SWITCH);
 318:	87 b3       	in	r24, 0x17	; 23
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DATADIR_LCD_CTRL,EN_SWITCH);
 31e:	87 b3       	in	r24, 0x17	; 23
 320:	88 60       	ori	r24, 0x08	; 8
 322:	87 bb       	out	0x17, r24	; 23
	/*			clear control pins					*/
	CLR_BIT(LCD_CTRL,RS_SWITCH);
 324:	88 b3       	in	r24, 0x18	; 24
 326:	8d 7f       	andi	r24, 0xFD	; 253
 328:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL,RW_SWITCH);
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	8b 7f       	andi	r24, 0xFB	; 251
 32e:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL,EN_SWITCH);
 330:	88 b3       	in	r24, 0x18	; 24
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	88 bb       	out	0x18, r24	; 24
	/*			set port direction as output		*/
	DATADIR_LCD_PORT = 0xFF;
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	8a bb       	out	0x1a, r24	; 26
 33a:	8f e2       	ldi	r24, 0x2F	; 47
 33c:	95 e7       	ldi	r25, 0x75	; 117
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_INIT+0x3c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_INIT+0x42>
 344:	00 00       	nop
	_delay_ms(15);
	/*			clear the screen					*/
	LCD_CLR_SCREEN();
 346:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_CLR_SCREEN>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINE);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);	
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINE);
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
	#endif
	
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 356:	8f e0       	ldi	r24, 0x0F	; 15
 358:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	0e 94 40 01 	call	0x280	; 0x280 <LCD_WRITE_COMMAND>
 368:	08 95       	ret

0000036a <LCD_WRITE_CHAR>:
	LCD_EN_LATCH();
	#endif
}

void LCD_WRITE_CHAR(u8 data)
{
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
	static s8 count = 0;
	
	LCD_IS_BUSY();
 36e:	0e 94 30 01 	call	0x260	; 0x260 <LCD_IS_BUSY>
	if(count == 16)
 372:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 376:	80 31       	cpi	r24, 0x10	; 16
 378:	51 f4       	brne	.+20     	; 0x38e <LCD_WRITE_CHAR+0x24>
	{
		LCD_GOTO_XY(2,0);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		count++;
 382:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
 38c:	0e c0       	rjmp	.+28     	; 0x3aa <LCD_WRITE_CHAR+0x40>
	}
	else if(count == 32)
 38e:	80 32       	cpi	r24, 0x20	; 32
 390:	49 f4       	brne	.+18     	; 0x3a4 <LCD_WRITE_CHAR+0x3a>
	{
		LCD_CLR_SCREEN();
 392:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_CLR_SCREEN>
		LCD_GOTO_XY(1,0);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		count = 0;
 39e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <LCD_WRITE_CHAR+0x40>
	}
	else
	{
		count++;
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
	CLR_BIT(LCD_CTRL,RW_SWITCH);		/* write mode		*/
	LCD_EN_LATCH();
	#endif
	
	#ifdef FOUR_BIT_MODE	
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
 3aa:	8b b3       	in	r24, 0x1b	; 27
 3ac:	8f 70       	andi	r24, 0x0F	; 15
 3ae:	9c 2f       	mov	r25, r28
 3b0:	90 7f       	andi	r25, 0xF0	; 240
 3b2:	89 2b       	or	r24, r25
 3b4:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(LCD_CTRL,RS_SWITCH);		/* data register	*/
 3b6:	88 b3       	in	r24, 0x18	; 24
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL,RW_SWITCH);		/* write mode		*/
 3bc:	88 b3       	in	r24, 0x18	; 24
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	8f ec       	ldi	r24, 0xCF	; 207
 3c4:	97 e0       	ldi	r25, 0x07	; 7
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_WRITE_CHAR+0x5c>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_WRITE_CHAR+0x62>
 3cc:	00 00       	nop
	_delay_ms(1);
	LCD_EN_LATCH();
 3ce:	0e 94 23 01 	call	0x246	; 0x246 <LCD_EN_LATCH>
	
	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	30 e1       	ldi	r19, 0x10	; 16
 3d6:	c3 9f       	mul	r28, r19
 3d8:	c0 01       	movw	r24, r0
 3da:	11 24       	eor	r1, r1
 3dc:	92 2f       	mov	r25, r18
 3de:	9f 70       	andi	r25, 0x0F	; 15
 3e0:	89 2b       	or	r24, r25
 3e2:	8b bb       	out	0x1b, r24	; 27
 3e4:	8f ec       	ldi	r24, 0xCF	; 207
 3e6:	97 e0       	ldi	r25, 0x07	; 7
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_WRITE_CHAR+0x7e>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_WRITE_CHAR+0x84>
 3ee:	00 00       	nop
	_delay_ms(1);
	LCD_EN_LATCH();
 3f0:	0e 94 23 01 	call	0x246	; 0x246 <LCD_EN_LATCH>
	#endif
}
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:

int main(void)
{
    /* Replace with your application code */
	
	LCD_INIT();
 3f8:	0e 94 81 01 	call	0x302	; 0x302 <LCD_INIT>
	KEYPAD_INIT();
 3fc:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_INIT>
	
	s8 Pressed_Key;
	
    while (1) 
    {
		Pressed_Key = KEYPAD_GETCHAR();
 400:	0e 94 64 00 	call	0xc8	; 0xc8 <KEYPAD_GETCHAR>
		
		switch(Pressed_Key)
 404:	81 32       	cpi	r24, 0x21	; 33
 406:	19 f0       	breq	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	8e 34       	cpi	r24, 0x4E	; 78
 40a:	d1 f3       	breq	.-12     	; 0x400 <__EEPROM_REGION_LENGTH__>
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			case '!':
			LCD_CLR_SCREEN();
 40e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_CLR_SCREEN>
			break;
 412:	f6 cf       	rjmp	.-20     	; 0x400 <__EEPROM_REGION_LENGTH__>
			
			case 'N':
			break;
			
			default:
			LCD_WRITE_CHAR(Pressed_Key);
 414:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WRITE_CHAR>
			break;
 418:	f3 cf       	rjmp	.-26     	; 0x400 <__EEPROM_REGION_LENGTH__>

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
